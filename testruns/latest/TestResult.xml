<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="2" testcasecount="118" result="Failed" total="118" passed="36" failed="1" inconclusive="81" skipped="0" asserts="349" engine-version="3.10.0.0" clr-version="4.0.30319.42000" start-time="2020-02-02 18:16:58Z" end-time="2020-02-02 18:16:59Z" duration="1.847574">
  <command-line><![CDATA["C:\ProgramData\chocolatey\lib\nunit-console-runner\tools\nunit3-console.exe" ..\..\src\Testing\Specflow\bin\Debug\Testing.Specflow.dll --result=report.txt;transform=..\..\..\nunit-transforms\nunit3-summary\text-report.xslt --result=report.html;transform=..\..\..\nunit-transforms\nunit3-summary\html-report.xslt --result=readme.md;transform=..\md-report.xslt --result=TestResult.xml]]></command-line>
  <test-suite type="Assembly" id="0-1131" name="Testing.Specflow.dll" fullname="F:\src\BenedictionGame\src\Testing\Specflow\bin\Debug\Testing.Specflow.dll" runstate="Runnable" testcasecount="118" result="Failed" site="Child" start-time="2020-02-02 18:16:58Z" end-time="2020-02-02 18:16:59Z" duration="1.162945" total="118" passed="36" failed="1" warnings="0" inconclusive="81" skipped="0" asserts="349">
    <environment framework-version="3.12.0.0" clr-version="4.0.30319.42000" os-version="Microsoft Windows NT 10.0.17134.0" platform="Win32NT" cwd="F:\src\BenedictionGame\testruns\latest" machine-name="SPENCER-VR" user="Oculus Rift" user-domain="SPENCER-VR" culture="en-US" uiculture="en-US" os-architecture="x64" />
    <settings>
      <setting name="DisposeRunners" value="True" />
      <setting name="WorkDirectory" value="F:\src\BenedictionGame\testruns\latest" />
      <setting name="ImageRuntimeVersion" value="4.0.30319" />
      <setting name="ImageTargetFrameworkName" value=".NETFramework,Version=v4.7.1" />
      <setting name="ImageRequiresX86" value="False" />
      <setting name="ImageRequiresDefaultAppDomainAssemblyResolver" value="False" />
      <setting name="NumberOfTestWorkers" value="12" />
    </settings>
    <properties>
      <property name="_PID" value="5840" />
      <property name="_APPDOMAIN" value="domain-" />
    </properties>
    <failure>
      <message><![CDATA[One or more child tests had errors]]></message>
    </failure>
    <test-suite type="SetUpFixture" id="0-1000" name="[default namespace]" fullname="Testing_Specflow_NUnitAssemblyHooks" classname="Testing_Specflow_NUnitAssemblyHooks" runstate="Runnable" testcasecount="118" result="Failed" site="Child" start-time="2020-02-02 18:16:58Z" end-time="2020-02-02 18:16:59Z" duration="1.147303" total="118" passed="36" failed="1" warnings="0" inconclusive="81" skipped="0" asserts="349">
      <failure>
        <message><![CDATA[One or more child tests had errors]]></message>
      </failure>
      <output><![CDATA[-> Loading plugin F:\src\BenedictionGame\src\Testing\Specflow\bin\Debug\TechTalk.SpecFlow.NUnit.SpecFlowPlugin.dll
-> Using default config
]]></output>
      <test-suite type="TestSuite" id="0-1132" name="Testing" fullname="Testing" runstate="Runnable" testcasecount="118" result="Failed" site="Child" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.555566" total="118" passed="36" failed="1" warnings="0" inconclusive="81" skipped="0" asserts="349">
        <failure>
          <message><![CDATA[One or more child tests had errors]]></message>
        </failure>
        <test-suite type="TestSuite" id="0-1133" name="Specflow" fullname="Testing.Specflow" runstate="Runnable" testcasecount="118" result="Failed" site="Child" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.555542" total="118" passed="36" failed="1" warnings="0" inconclusive="81" skipped="0" asserts="349">
          <failure>
            <message><![CDATA[One or more child tests had errors]]></message>
          </failure>
          <test-suite type="TestSuite" id="0-1134" name="Features" fullname="Testing.Specflow.Features" runstate="Runnable" testcasecount="118" result="Failed" site="Child" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.555537" total="118" passed="36" failed="1" warnings="0" inconclusive="81" skipped="0" asserts="349">
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="TestSuite" id="0-1136" name="GameBoard" fullname="Testing.Specflow.Features.GameBoard" runstate="Runnable" testcasecount="4" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.314091" total="4" passed="3" failed="0" warnings="0" inconclusive="1" skipped="0" asserts="24">
              <test-suite type="TestFixture" id="0-1125" name="MovementFeature" fullname="Testing.Specflow.Features.GameBoard.MovementFeature" classname="Testing.Specflow.Features.GameBoard.MovementFeature" runstate="Runnable" testcasecount="4" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.314047" total="4" passed="3" failed="0" warnings="0" inconclusive="1" skipped="0" asserts="24">
                <properties>
                  <property name="Description" value="Movement" />
                </properties>
                <test-suite type="ParameterizedMethod" id="0-1129" name="MovingNorthWithoutWrappingAround" fullname="Testing.Specflow.Features.GameBoard.MovementFeature.MovingNorthWithoutWrappingAround" classname="Testing.Specflow.Features.GameBoard.MovementFeature" runstate="Runnable" testcasecount="2" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.134132" total="2" passed="2" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="14">
                  <properties>
                    <property name="Description" value="Moving North Without Wrapping Around" />
                  </properties>
                  <test-case id="0-1127" name="MovingNorthWithoutWrappingAround(&quot;E5&quot;,&quot;E6&quot;,null)" fullname="Testing.Specflow.Features.GameBoard.MovementFeature.MovingNorthWithoutWrappingAround(&quot;E5&quot;,&quot;E6&quot;,null)" methodname="MovingNorthWithoutWrappingAround" classname="Testing.Specflow.Features.GameBoard.MovementFeature" runstate="Runnable" seed="281014551" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.128091" asserts="7">
                    <output><![CDATA[Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
Given I add this red piece: E5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/99732cc7-6515-ffb2-b253-95c12d9dd6a6.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "E5") (0.0s)
And the current turn is RedAction1
Board flags set to: RedAction1
-> done: CommonSteps.GivenTheCurrentTurnIsRed(RedAction1) (0.0s)
When the red player moves the piece at E5 to E6
Accepted: e5e6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8a7e5a64-8d70-7c87-dd5a-8033eac31e00-E5-E6.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E5, E6) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: E6
Successfully validated 1 Red piece.
-> done: CommonSteps.ThenTheBoardHasPiecesMatching(Red, "E6") (0.0s)
And the current turn is RedAction2
Board flags set to: RedAction2
-> done: CommonSteps.ThenTheCurrentTurnIsRed(RedAction2) (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1128" name="MovingNorthWithoutWrappingAround(&quot;E4&quot;,&quot;E5&quot;,null)" fullname="Testing.Specflow.Features.GameBoard.MovementFeature.MovingNorthWithoutWrappingAround(&quot;E4&quot;,&quot;E5&quot;,null)" methodname="MovingNorthWithoutWrappingAround" classname="Testing.Specflow.Features.GameBoard.MovementFeature" runstate="Runnable" seed="1954714940" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001169" asserts="7">
                    <output><![CDATA[Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
Given I add this red piece: E4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f977260b-db80-81ff-874f-cf6bc707b0dc.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "E4") (0.0s)
And the current turn is RedAction1
Board flags set to: RedAction1
-> done: CommonSteps.GivenTheCurrentTurnIsRed(RedAction1) (0.0s)
When the red player moves the piece at E4 to E5
Accepted: e4e5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f2a17dbc-ea88-715b-c29d-547ce78ff822-E4-E5.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E4, E5) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: E5
Successfully validated 1 Red piece.
-> done: CommonSteps.ThenTheBoardHasPiecesMatching(Red, "E5") (0.0s)
And the current turn is RedAction2
Board flags set to: RedAction2
-> done: CommonSteps.ThenTheCurrentTurnIsRed(RedAction2) (0.0s)
]]></output>
                  </test-case>
                </test-suite>
                <test-case id="0-1130" name="MovingTooFar" fullname="Testing.Specflow.Features.GameBoard.MovementFeature.MovingTooFar" methodname="MovingTooFar" classname="Testing.Specflow.Features.GameBoard.MovementFeature" runstate="Runnable" seed="1599452280" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.127037" asserts="3">
                  <properties>
                    <property name="Description" value="Moving Too Far" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Then(@"the action fails with: Stack Size (.*) Piece At E(.*) Cannot Reach E(.*) \(but can reach: E(.*), E(.*)\)")]
        public void ThenTheActionFailsWithStackSizePieceAtECannotReachEButCanReachEE(int p0, int p1, int p2, int p3, int p4)
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
Given I add this red piece: E3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a6b5752d-c52b-655c-5821-a80fe616ffb7.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "E3") (0.0s)
And the current turn is RedAction1
Board flags set to: RedAction1
-> done: CommonSteps.GivenTheCurrentTurnIsRed(RedAction1) (0.0s)
When the red player moves the piece at E3 to E5
Rejected: e3e5: Stack Size 1 Piece At E3 Cannot Reach E5 (but can reach: E4, E2)
-> done: ActionSteps.WhenIMove(Red, E3, E5) (0.0s)
Then the action fails with: Stack Size 1 Piece At E3 Cannot Reach E5 (but can reach: E4, E2)
-> No matching step definition found for the step. Use the following code to create one:
        [Then(@"the action fails with: Stack Size (.*) Piece At E(.*) Cannot Reach E(.*) \(but can reach: E(.*), E(.*)\)")]
        public void ThenTheActionFailsWithStackSizePieceAtECannotReachEButCanReachEE(int p0, int p1, int p2, int p3, int p4)
        {
            ScenarioContext.Current.Pending();
        }

And the board has red pieces matching: E3
-> skipped because of previous errors
And the current turn is RedAction1
-> skipped because of previous errors
]]></output>
                </test-case>
                <test-case id="0-1126" name="SingleMoveNorth" fullname="Testing.Specflow.Features.GameBoard.MovementFeature.SingleMoveNorth" methodname="SingleMoveNorth" classname="Testing.Specflow.Features.GameBoard.MovementFeature" runstate="Runnable" seed="161778196" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001361" asserts="7">
                  <properties>
                    <property name="Description" value="Single Move North" />
                  </properties>
                  <output><![CDATA[Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
Given I add this red piece: E5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/99732cc7-6515-ffb2-b253-95c12d9dd6a6.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "E5") (0.0s)
And the current turn is RedAction1
Board flags set to: RedAction1
-> done: CommonSteps.GivenTheCurrentTurnIsRed(RedAction1) (0.0s)
When the red player moves the piece at E5 to E6
Accepted: e5e6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8a7e5a64-8d70-7c87-dd5a-8033eac31e00-E5-E6.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E5, E6) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: E6
Successfully validated 1 Red piece.
-> done: CommonSteps.ThenTheBoardHasPiecesMatching(Red, "E6") (0.0s)
And the current turn is RedAction2
Board flags set to: RedAction2
-> done: CommonSteps.ThenTheCurrentTurnIsRed(RedAction2) (0.0s)
]]></output>
                </test-case>
              </test-suite>
            </test-suite>
            <test-suite type="TestSuite" id="0-1135" name="GameRules" fullname="Testing.Specflow.Features.GameRules" runstate="Runnable" testcasecount="114" result="Failed" site="Child" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.555526" total="114" passed="33" failed="1" warnings="0" inconclusive="80" skipped="0" asserts="325">
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-suite type="TestFixture" id="0-1001" name="BlockRulesFeature" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" testcasecount="5" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.063581" total="5" passed="2" failed="0" warnings="0" inconclusive="3" skipped="0" asserts="67">
                <properties>
                  <property name="Description" value="Block Rules" />
                </properties>
                <test-case id="0-1002" name="BlockHappyPath" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.BlockHappyPath" methodname="BlockHappyPath" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="969802041" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.018478" asserts="5">
                  <properties>
                    <property name="Description" value="Block Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player blockades A1
Accepted: Ba1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e5c4514c-8802-69fd-4f37-202fa92f03ef-A1.png?raw=true)
-> done: ActionSteps.WhenIBlockade(Red, A1) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the board has blocks matching: A1
Successfully validated 1 block.
-> done: CommonSteps.ThenTheBoardHasBlocksMatching("A1") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1003" name="BlockMaximum" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.BlockMaximum" methodname="BlockMaximum" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="1452274475" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.028698" asserts="62">
                  <properties>
                    <property name="Description" value="Block Maximum" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
When the following moves are performed:
  --- table step argument ---
  | RedAction1 | RedAction2 | BlueAction1 | BlueAction2 |
  | Bd2        | Bf2        | Be1         | Be9         |
  | Bd7        | Bf7        | Bb6         | Bc5         |
  | Ba4        | Bg5        | Bh6         | Bi4         |
  | Bg3        | Bh1        | Bi2         | Bc3         |
  | Bb1        | Ba2        | Be6         | Be4         |
Accepted: Bd2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7984a007-2498-ec86-293c-638dcd7f4904-D2.png?raw=true)
Accepted: Bf2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0b4d0cd9-431b-4457-e1f2-c7848684822d-F2.png?raw=true)
Accepted: Be1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/397aa385-a656-c736-2aeb-735614b775b5-E1.png?raw=true)
Accepted: Be9
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c665e17f-24ba-77bd-cc15-2ca775d17faf-E9.png?raw=true)
Accepted: Bd7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3966703c-bf98-4c0a-6435-a3b87b0e3cf1-D7.png?raw=true)
Accepted: Bf7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8cafa76e-7420-3556-9aca-6d2114d9e333-F7.png?raw=true)
Accepted: Bb6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/55bde147-30e1-59c6-3420-4149aa00bcba-B6.png?raw=true)
Accepted: Bc5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/be0d15be-5426-3d22-53d4-e43bdf5ceb83-C5.png?raw=true)
Accepted: Ba4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/029566ff-30c0-c0d2-d1c9-a7f7c00261e4-A4.png?raw=true)
Accepted: Bg5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/25cc0394-003c-6b5b-e5a9-f429b04f3821-G5.png?raw=true)
Accepted: Bh6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4ec9d589-d95e-5b7c-5486-c8791d542420-H6.png?raw=true)
Accepted: Bi4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4ccddfda-5b2b-fca7-7201-df449503d573-I4.png?raw=true)
Accepted: Bg3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/68ad6e35-73cb-2ce9-bdac-c4c4e041500a-G3.png?raw=true)
Accepted: Bh1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/58f58c4a-f2d9-5e5c-71bc-1c273473ab1a-H1.png?raw=true)
Accepted: Bi2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f9b6d123-09b2-adb2-cf37-bbbcb6e18af3-I2.png?raw=true)
Accepted: Bc3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1c5a59f4-1915-c3fb-1833-5b68d66fca9c-C3.png?raw=true)
Accepted: Bb1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/68b93422-6668-fe2b-463c-123ef13aec1c-B1.png?raw=true)
Accepted: Ba2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c875f2da-0c42-39c7-29e2-da23aafb95fb-A2.png?raw=true)
Accepted: Be6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f17b7eb-ff6d-6b64-fd2b-8a2e2c8c63b9-E6.png?raw=true)
Accepted: Be4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5be7070c-b19f-276f-bbdf-d214f222b5d3-E4.png?raw=true)
-> done: ActionSteps.WhenTheFollowingMoves(<table>) (0.0s)
Then the board has blocks matching: A24B16C35D27E1469F27G35H16I24
Successfully validated 20 blocks.
-> done: CommonSteps.ThenTheBoardHasBlocksMatching("A24B16C35D27E1469...") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1005" name="CannotBlockAdjacentAnotherBlock" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.CannotBlockAdjacentAnotherBlock" methodname="CannotBlockAdjacentAnotherBlock" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="909835526" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.010349" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Block Adjacent Another Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1004" name="CannotBlockHomeSpace" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.CannotBlockHomeSpace" methodname="CannotBlockHomeSpace" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="73863096" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.003844" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Block Home Space" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1006" name="CannotBlockOccupiedSpace" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.CannotBlockOccupiedSpace" methodname="CannotBlockOccupiedSpace" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="285760869" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001641" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Block Occupied Space" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1007" name="BridgeRulesFeature" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" testcasecount="8" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.014825" total="8" passed="1" failed="0" warnings="0" inconclusive="7" skipped="0" asserts="2">
                <properties>
                  <property name="Description" value="Bridge Rules" />
                </properties>
                <test-case id="0-1014" name="BridgeCannotBlessCursedPieces" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.BridgeCannotBlessCursedPieces" methodname="BridgeCannotBlessCursedPieces" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1451649416" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.002573" asserts="0">
                  <properties>
                    <property name="Description" value="Bridge Cannot Bless Cursed Pieces" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1008" name="BridgeHappyPath" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.BridgeHappyPath" methodname="BridgeHappyPath" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="426520964" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.003555" asserts="2">
                  <properties>
                    <property name="Description" value="Bridge Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:C2D13E12k4F124G4H4I45   |
  | B:A12B3C4D578E68k9F68G6   |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/78ef14af-3123-d5a7-50c7-8f649cc50dcb.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at d1 to c1
Accepted: d1c1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/93c3cb3a-25de-716b-775a-323c64b91731-C1-D1.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, D1, C1) (0.0s)
Then the board has red pieces matching: C1b2bD3bE12k4bF124bG4bH4bI4b5b
Successfully validated 13 Red pieces.
-> done: CommonSteps.ThenTheBoardHasPiecesMatching(Red, "C1b2bD3bE12k4bF12...") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1009" name="BridgeMaximum" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.BridgeMaximum" methodname="BridgeMaximum" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1106856951" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001668" asserts="0">
                  <properties>
                    <property name="Description" value="Bridge Maximum" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1010" name="BridgeWithWrongColorCriticalPiece" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.BridgeWithWrongColorCriticalPiece" methodname="BridgeWithWrongColorCriticalPiece" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1376493456" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001544" asserts="0">
                  <properties>
                    <property name="Description" value="Bridge With Wrong Color Critical Piece" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1015" name="HomeDropCompletingBridgeWinsGame" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.HomeDropCompletingBridgeWinsGame" methodname="HomeDropCompletingBridgeWinsGame" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1553262528" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001446" asserts="0">
                  <properties>
                    <property name="Description" value="Home Drop Completing Bridge Wins Game" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1011" name="SplitIntoBridgeAvoidsAllCursesIfSplitPiecesAdjacent" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.SplitIntoBridgeAvoidsAllCursesIfSplitPiecesAdjacent" methodname="SplitIntoBridgeAvoidsAllCursesIfSplitPiecesAdjacent" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="512148667" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001283" asserts="0">
                  <properties>
                    <property name="Description" value="Split Into Bridge Avoids All Curses If Split Pieces Adjacent" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1013" name="SplitIntoBridgeAvoidsSourceCurseIfSourcePieceAdjacent" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.SplitIntoBridgeAvoidsSourceCurseIfSourcePieceAdjacent" methodname="SplitIntoBridgeAvoidsSourceCurseIfSourcePieceAdjacent" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1968229407" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001126" asserts="0">
                  <properties>
                    <property name="Description" value="Split Into Bridge Avoids Source Curse If Source Piece Adjacent" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1012" name="SplitIntoBridgeAvoidsTargetCurseIfTargetPieceAdjacent" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.SplitIntoBridgeAvoidsTargetCurseIfTargetPieceAdjacent" methodname="SplitIntoBridgeAvoidsTargetCurseIfTargetPieceAdjacent" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="573031211" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001111" asserts="0">
                  <properties>
                    <property name="Description" value="Split Into Bridge Avoids Target Curse If Target Piece Adjacent" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1016" name="DropRulesFeature" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" testcasecount="5" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.009279" total="5" passed="2" failed="0" warnings="0" inconclusive="3" skipped="0" asserts="10">
                <properties>
                  <property name="Description" value="Drop Rules" />
                </properties>
                <test-case id="0-1019" name="CannotDropOntoBlock" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.CannotDropOntoBlock" methodname="CannotDropOntoBlock" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="921098823" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001691" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Drop Onto Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1020" name="CannotDropOntoOccupiedSpace" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.CannotDropOntoOccupiedSpace" methodname="CannotDropOntoOccupiedSpace" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="1981267113" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001121" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Drop Onto Occupied Space" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1018" name="CannotDropOutsideZone" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.CannotDropOutsideZone" methodname="CannotDropOutsideZone" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="1514060297" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.002298" asserts="4">
                  <properties>
                    <property name="Description" value="Cannot Drop Outside Zone" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player drops a new piece at e5
Rejected: @e5: Drop Must Be Adjacent Your Home At E2
-> done: ActionSteps.WhenIDrop(Red, E5) (0.0s)
Then the action fails
Failed with: Drop Must Be Adjacent Your Home At E2
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1017" name="DropHappyPath" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.DropHappyPath" methodname="DropHappyPath" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="1381416713" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.002589" asserts="6">
                  <properties>
                    <property name="Description" value="Drop Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player merges the piece at e3 into f2
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2bb95324-1990-6880-7344-3f8bc6e10ece-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E3, F2) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
When the red player drops a new piece at e3
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/290c59e7-37b9-974f-069c-26f19bc400fb-E3.png?raw=true)
-> done: ActionSteps.WhenIDrop(Red, E3) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1021" name="HomeDropBecomesKing" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.HomeDropBecomesKing" methodname="HomeDropBecomesKing" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="1325052804" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001204" asserts="0">
                  <properties>
                    <property name="Description" value="Home Drop Becomes King" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1022" name="ExamplesFeature" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" testcasecount="22" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.040079" total="22" passed="22" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="211">
                <properties>
                  <property name="Description" value="Examples" />
                </properties>
                <test-case id="0-1029" name="CannotBlockOwnKing" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.CannotBlockOwnKing" methodname="CannotBlockOwnKing" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="2114408451" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001609" asserts="4">
                  <properties>
                    <property name="Description" value="Cannot Block Own King" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
When red does Be2
Rejected: Be2: Cannot Block Red Home at Location E2
-> done: ActionSteps.WhenDoes(Red, "Be2") (0.0s)
Then the action fails
Failed with: Cannot Block Red Home at Location E2
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1023" name="LoadAPreviouslyCreatedBoard" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.LoadAPreviouslyCreatedBoard" methodname="LoadAPreviouslyCreatedBoard" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1572610202" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000643" asserts="2">
                  <properties>
                    <property name="Description" value="Load a Previously Created Board" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I have board WeirdSituation1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f79d54ef-f62b-8a94-2d61-34eec0fee5b4.png?raw=true)
Loaded board WeirdSituation1.
-> done: SetupSteps.GivenIHaveNamedBoard("WeirdSituation1") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1025" name="LoadASavedBoard" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.LoadASavedBoard" methodname="LoadASavedBoard" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="282189979" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000731" asserts="0">
                  <properties>
                    <property name="Description" value="Load a Saved Board" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                       |
  | Benediction v1: R E2 B-E8   |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+ |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+ |
  | X:B5C2D4E6F3H6I1            |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f79d54ef-f62b-8a94-2d61-34eec0fee5b4.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1030" name="MergeSplitMergeDoesntCreatePieces" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.MergeSplitMergeDoesntCreatePieces" methodname="MergeSplitMergeDoesntCreatePieces" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1490659446" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.019831" asserts="3">
                  <properties>
                    <property name="Description" value="Merge Split Merge Doesn't Create Pieces" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player merges the piece at f2 onto e3
Accepted: f2+e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1c26ac3a-fec5-1510-aa54-4bdeb39b0c53-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, F2, E3) (0.0s)
And the red player splits 1 piece from e3 onto d2
Accepted: e3-1-d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d161f66c-b01f-4425-e375-f0b0d312019e-D2-E3.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, 1, E3, D2) (0.0s)
Then the board has red pieces matching: D12+E12k3F1
Successfully validated 6 Red pieces.
-> done: CommonSteps.ThenTheBoardHasPiecesMatching(Red, "D12+E12k3F1") (0.0s)
]]></output>
                </test-case>
                <test-suite type="ParameterizedMethod" id="0-1045" name="NoneOfTheseAreValidBlockLocations" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" testcasecount="14" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.005485" total="14" passed="14" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="28">
                  <properties>
                    <property name="Description" value="None of These Are Valid Block Locations" />
                  </properties>
                  <test-case id="0-1031" name="NoneOfTheseAreValidBlockLocations(&quot;d1&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;d1&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1608472856" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000961" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades d1
Rejected: Bd1: Location D1 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, D1) (0.0s)
Then the action fails
Failed with: Location D1 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1032" name="NoneOfTheseAreValidBlockLocations(&quot;d2&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;d2&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="902730538" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000345" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades d2
Rejected: Bd2: Location D2 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, D2) (0.0s)
Then the action fails
Failed with: Location D2 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1033" name="NoneOfTheseAreValidBlockLocations(&quot;e1&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e1&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1443190258" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000343" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e1
Rejected: Be1: Location E1 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E1) (0.0s)
Then the action fails
Failed with: Location E1 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1034" name="NoneOfTheseAreValidBlockLocations(&quot;e2&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e2&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="142511946" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000358" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e2
Rejected: Be2: Location E2 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E2) (0.0s)
Then the action fails
Failed with: Location E2 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1035" name="NoneOfTheseAreValidBlockLocations(&quot;e3&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e3&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="781672504" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000364" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e3
Rejected: Be3: Location E3 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E3) (0.0s)
Then the action fails
Failed with: Location E3 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1036" name="NoneOfTheseAreValidBlockLocations(&quot;f1&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;f1&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1897741732" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000364" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades f1
Rejected: Bf1: Location F1 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, F1) (0.0s)
Then the action fails
Failed with: Location F1 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1037" name="NoneOfTheseAreValidBlockLocations(&quot;f2&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;f2&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1688835507" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000330" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades f2
Rejected: Bf2: Location F2 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, F2) (0.0s)
Then the action fails
Failed with: Location F2 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1038" name="NoneOfTheseAreValidBlockLocations(&quot;d7&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;d7&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="320425899" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000333" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades d7
Rejected: Bd7: Location D7 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, D7) (0.0s)
Then the action fails
Failed with: Location D7 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1039" name="NoneOfTheseAreValidBlockLocations(&quot;d8&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;d8&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="533641140" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000322" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades d8
Rejected: Bd8: Location D8 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, D8) (0.0s)
Then the action fails
Failed with: Location D8 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1040" name="NoneOfTheseAreValidBlockLocations(&quot;e7&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e7&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1355940219" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000321" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e7
Rejected: Be7: Location E7 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E7) (0.0s)
Then the action fails
Failed with: Location E7 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1041" name="NoneOfTheseAreValidBlockLocations(&quot;e8&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e8&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="919249804" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000332" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e8
Rejected: Be8: Location E8 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E8) (0.0s)
Then the action fails
Failed with: Location E8 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1042" name="NoneOfTheseAreValidBlockLocations(&quot;e9&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e9&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1889287270" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000330" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e9
Rejected: Be9: Location E9 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E9) (0.0s)
Then the action fails
Failed with: Location E9 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1043" name="NoneOfTheseAreValidBlockLocations(&quot;f7&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;f7&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="960525030" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000326" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades f7
Rejected: Bf7: Location F7 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, F7) (0.0s)
Then the action fails
Failed with: Location F7 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1044" name="NoneOfTheseAreValidBlockLocations(&quot;f8&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;f8&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="612340076" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000322" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades f8
Rejected: Bf8: Location F8 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, F8) (0.0s)
Then the action fails
Failed with: Location F8 Not Empty
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                </test-suite>
                <test-case id="0-1026" name="PerformSomeMoves" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.PerformSomeMoves" methodname="PerformSomeMoves" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1673054657" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001604" asserts="6">
                  <properties>
                    <property name="Description" value="Perform Some Moves" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at e3 to e4
Accepted: e3e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f8cfc55-c7ea-8d9f-0af6-7449cf98dba1-E3-E4.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E3, E4) (0.0s)
When the red player drops a new piece at e3
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5182a0c2-1497-e92b-e861-6a4831aba196-E3.png?raw=true)
-> done: ActionSteps.WhenIDrop(Red, E3) (0.0s)
When the blue player blockades c2
Accepted: Bc2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2cc65043-c118-a2a3-0e19-3030878b5ae2-C2.png?raw=true)
-> done: ActionSteps.WhenIBlockade(Blue, C2) (0.0s)
When the blue player merges the piece at f7 into e7
Accepted: f7+e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/17d48168-58f0-f5e3-3f4a-6659b4a25195-E7-F7.png?raw=true)
-> done: ActionSteps.WhenIMerge(Blue, F7, E7) (0.0s)
When the red player merges the piece at e4 into e3
Accepted: e4+e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8a76118e-75f3-d925-112c-e2702b25af90-E3-E4.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E4, E3) (0.0s)
When the red player splits 1 piece from e3 onto d2
Accepted: e3-1-d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/114375ac-2104-3ea4-981b-86cf2002a43c-D2-E3.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, 1, E3, D2) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1027" name="PerformSomeMoves_ShortNotation" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.PerformSomeMoves_ShortNotation" methodname="PerformSomeMoves_ShortNotation" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="935202341" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001458" asserts="23">
                  <properties>
                    <property name="Description" value="Perform Some Moves - Short Notation" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When red does e3e4
Accepted: e3e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f8cfc55-c7ea-8d9f-0af6-7449cf98dba1-E3-E4.png?raw=true)
-> done: ActionSteps.WhenDoes(Red, "e3e4") (0.0s)
When red does @e3
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5182a0c2-1497-e92b-e861-6a4831aba196-E3.png?raw=true)
-> done: ActionSteps.WhenDoes(Red, "@e3") (0.0s)
When blue does Bc2
Accepted: Bc2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2cc65043-c118-a2a3-0e19-3030878b5ae2-C2.png?raw=true)
-> done: ActionSteps.WhenDoes(Blue, "Bc2") (0.0s)
When blue does f7+e7
Accepted: f7+e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/17d48168-58f0-f5e3-3f4a-6659b4a25195-E7-F7.png?raw=true)
-> done: ActionSteps.WhenDoes(Blue, "f7+e7") (0.0s)
When red does e4+e3
Accepted: e4+e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8a76118e-75f3-d925-112c-e2702b25af90-E3-E4.png?raw=true)
-> done: ActionSteps.WhenDoes(Red, "e4+e3") (0.0s)
When red does e3-1-d2
Accepted: e3-1-d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/114375ac-2104-3ea4-981b-86cf2002a43c-D2-E3.png?raw=true)
-> done: ActionSteps.WhenDoes(Red, "e3-1-d2") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1028" name="PerformSomeMoves_TableNotation" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.PerformSomeMoves_TableNotation" methodname="PerformSomeMoves_TableNotation" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="2011172825" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.006732" asserts="143">
                  <properties>
                    <property name="Description" value="Perform Some Moves - Table Notation" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the following moves are performed:
  --- table step argument ---
  | RedAction1 | RedAction2 | BlueAction1 | BlueAction2 |
  | f1+f2      | f2-1-g2    | e8+e9       | Bi3         |
  | e3+d2      | Bb5        | f7+f8       | f8f7        |
  | d2c1       | e1f1       | Ba2         | f7-1-g7     |
  | e2e3       | d1e1       | Bf8         | f7g6        |
  | Bg1        | Bb1        | Bd4         | d7+e7       |
  | f1+e1      | f2e2       | @d7         | d7+d8       |
  | @f2        | f2+e2      | @d7         | @e8         |
  | @f2        | e3+f2      | e8+d7       | @e8         |
  | @d1        | @e3        | @f7         | f7+e8       |
  | @f1        | @d2        | @f7         | Bd6         |
Accepted: f1+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/67fdf138-8f61-5da7-ab35-12795493aee5-F1-F2.png?raw=true)
Accepted: f2-1-g2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1af32ad9-c961-a61b-409a-933fb50fb937-F2-G2.png?raw=true)
Accepted: e8+e9
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/cb1a604d-fb41-39d8-5ac6-22f08e23ccc3-E8-E9.png?raw=true)
Accepted: Bi3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2399e1a0-8612-b381-4d2e-3a657ec52421-I3.png?raw=true)
Accepted: e3+d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a65671c2-3d77-9002-52ec-3fbcc1907851-D2-E3.png?raw=true)
Accepted: Bb5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e3834eb7-a3d0-d039-d608-cc8502f73fa5-B5.png?raw=true)
Accepted: f7+f8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/efac1306-33ec-8fd7-e323-bf19514ae0a3-F7-F8.png?raw=true)
Accepted: f8f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8ae1b03c-c460-8ba3-fcd6-73ab09a27d17-F7-F8.png?raw=true)
Accepted: d2c1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/9d73463e-9f60-12bc-51f7-edabf928c646-C1-D2.png?raw=true)
Accepted: e1f1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3796d78a-70f5-b431-b8cc-56a853cd349f-E1-F1.png?raw=true)
Accepted: Ba2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5376f783-a365-9120-1c99-221a0851529e-A2.png?raw=true)
Accepted: f7-1-g7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c494f7ff-1304-be41-0636-2e8a48e0a46e-F7-G7.png?raw=true)
Accepted: e2e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a8fc7cb1-317d-702d-3365-a72ea2d6e5ab-E2-E3.png?raw=true)
Accepted: d1e1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7cb37e96-a87f-4839-ab91-1a3c77b73f40-D1-E1.png?raw=true)
Accepted: Bf8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f55fa2fa-0b93-0964-07c3-7ed5f2f8dede-F8.png?raw=true)
Accepted: f7g6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/896594e3-7767-1914-cb7c-0b039266c4e6-F7-G6.png?raw=true)
Accepted: Bg1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0bba625a-68fb-7941-af04-112ba5a8dd1f-G1.png?raw=true)
Accepted: Bb1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/55033321-1ca3-4dbd-be86-12344d63f732-B1.png?raw=true)
Accepted: Bd4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ad88b565-b6ec-89b1-7fe2-270773e5ba06-D4.png?raw=true)
Accepted: d7+e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4aa47f8c-133e-9d2d-8d56-95559af3c5b0-D7-E7.png?raw=true)
Accepted: f1+e1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e58f02ce-7ed7-7dad-bedc-3e6a87a5fe94-E1-F1.png?raw=true)
Accepted: f2e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/59a1cf13-6e2f-4f0e-0b71-01b38971f760-E2-F2.png?raw=true)
Accepted: @d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7cb32bc7-085b-7ab2-2f1a-c8b213be89be-D7.png?raw=true)
Accepted: d7+d8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f405944e-9098-bff0-ff01-38d0b2417875-D7-D8.png?raw=true)
Accepted: @f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/6bc4a20a-5e28-5ca2-eb5f-6bb37c1c68b9-F2.png?raw=true)
Accepted: f2+e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8512d25a-4f05-7d95-dd27-5c5a8d1e8942-E2-F2.png?raw=true)
Accepted: @d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/cdb9a80d-2178-1092-0beb-2d9bd2fa7765-D7.png?raw=true)
Accepted: @e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5817ba73-10d3-c8b8-49c0-0c328ef1c67a-E8.png?raw=true)
Accepted: @f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5c6896be-106b-7f80-2e7b-1966a71c1d7f-F2.png?raw=true)
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/9d8dce61-ebc6-dc70-141e-932d94600eea-E3-F2.png?raw=true)
Accepted: e8+d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/03874236-00bb-48cc-ded9-f93b03099b24-D7-E8.png?raw=true)
Accepted: @e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5afe91be-7e72-3436-b5af-2d816ef2e37c-E8.png?raw=true)
Accepted: @d1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a32c2fe4-e203-8134-5328-8ee60647b1be-D1.png?raw=true)
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a8251063-7c7c-8969-f189-546123b79116-E3.png?raw=true)
Accepted: @f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f13707a5-c8e7-a441-68bc-769162413562-F7.png?raw=true)
Accepted: f7+e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/aec6595d-7606-683d-d250-2dc39954c01f-E8-F7.png?raw=true)
Accepted: @f1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/44b1e696-f4ab-9d58-a883-9e01980cb4a5-F1.png?raw=true)
Accepted: @d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/548d6064-f382-dfe5-f1e9-33c37f16839d-D2.png?raw=true)
Accepted: @f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/26869e5d-58b6-607a-0935-a7697a8b06f1-F7.png?raw=true)
Accepted: Bd6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1fc66954-f9c4-f931-2dcc-e80f493b0699-D6.png?raw=true)
-> done: ActionSteps.WhenTheFollowingMoves(<table>) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1024" name="StartFromAnEmptyBoard" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.StartFromAnEmptyBoard" methodname="StartFromAnEmptyBoard" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="157335470" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001554" asserts="2">
                  <properties>
                    <property name="Description" value="Start From an Empty Board" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
And I add this red piece: E3k+
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ef230c10-9e1a-3cbf-1a42-6ef542e184ac.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "E3k+") (0.0s)
And I add these blue pieces: D45+E56k7F5++++6+b+++7+++++
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3503036d-2e06-2a04-9548-2751253e93f2.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Blue, "D45+E56k7F5++++6+...") (0.0s)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1046" name="MergeRulesFeature" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" testcasecount="14" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.018248" total="14" passed="1" failed="0" warnings="0" inconclusive="13" skipped="0" asserts="4">
                <properties>
                  <property name="Description" value="Merge Rules" />
                </properties>
                <test-case id="0-1060" name="CannotMergeAboveStackSizeFifteen" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeAboveStackSizeFifteen" methodname="CannotMergeAboveStackSizeFifteen" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="2098993978" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001855" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge Above Stack Size Fifteen" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1054" name="CannotMergeCursedAndCursed" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeCursedAndCursed" methodname="CannotMergeCursedAndCursed" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1997447297" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001207" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge Cursed and Cursed" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1058" name="CannotMergeCursedAndKing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeCursedAndKing" methodname="CannotMergeCursedAndKing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1155285148" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001133" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge Cursed and King" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1053" name="CannotMergeCursedAndNormal" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeCursedAndNormal" methodname="CannotMergeCursedAndNormal" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="775028475" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001193" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge Cursed and Normal" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1059" name="CannotMergeKingAndKing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeKingAndKing" methodname="CannotMergeKingAndKing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="925446107" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001122" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge King and King" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1050" name="MergeAboveSizeTwoRequiresBlessing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeAboveSizeTwoRequiresBlessing" methodname="MergeAboveSizeTwoRequiresBlessing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="92929583" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001101" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Above Size Two Requires Blessing" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1057" name="MergeBlessedAndKing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeBlessedAndKing" methodname="MergeBlessedAndKing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1984153410" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001740" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Blessed and King" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1052" name="MergeCursedAndBlessed" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeCursedAndBlessed" methodname="MergeCursedAndBlessed" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1893103701" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001207" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Cursed and Blessed" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1047" name="MergeHappyPath" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeHappyPath" methodname="MergeHappyPath" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1405850704" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.000956" asserts="4">
                  <properties>
                    <property name="Description" value="Merge Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player merges the piece at e3 into f2
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2bb95324-1990-6880-7344-3f8bc6e10ece-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E3, F2) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1048" name="MergeMaximum" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeMaximum" methodname="MergeMaximum" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="324785847" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001228" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Maximum" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1051" name="MergeNormalAndBlessed" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeNormalAndBlessed" methodname="MergeNormalAndBlessed" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="953467117" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001234" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Normal and Blessed" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1055" name="MergeNormalAndKing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeNormalAndKing" methodname="MergeNormalAndKing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="358003463" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001315" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Normal and King" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1056" name="MergeNormalAndKingAboveStackSizeTwoRequiresBlessing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeNormalAndKingAboveStackSizeTwoRequiresBlessing" methodname="MergeNormalAndKingAboveStackSizeTwoRequiresBlessing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="858596361" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001260" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Normal and King Above Stack Size Two Requires Blessing" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1049" name="MergeNormalAndNormal" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeNormalAndNormal" methodname="MergeNormalAndNormal" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1356345699" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001222" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Normal and Normal" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1061" name="MovementRulesFeature" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" testcasecount="9" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.011295" total="9" passed="1" failed="0" warnings="0" inconclusive="8" skipped="0" asserts="6">
                <properties>
                  <property name="Description" value="Movement Rules" />
                </properties>
                <test-case id="0-1064" name="BlueCannotMoveThroughBlueWall" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.BlueCannotMoveThroughBlueWall" methodname="BlueCannotMoveThroughBlueWall" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="627016875" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001720" asserts="0">
                  <properties>
                    <property name="Description" value="Blue Cannot Move Through Blue Wall" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1066" name="CanCaptureEnemyPiece" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CanCaptureEnemyPiece" methodname="CanCaptureEnemyPiece" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="967998953" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001117" asserts="0">
                  <properties>
                    <property name="Description" value="Can Capture Enemy Piece" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1067" name="CannotCaptureOwnPiece" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CannotCaptureOwnPiece" methodname="CannotCaptureOwnPiece" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="1526377930" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001089" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Capture Own Piece" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1065" name="CannotDepartEdgeOfBoard" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CannotDepartEdgeOfBoard" methodname="CannotDepartEdgeOfBoard" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="1985872946" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001199" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Depart Edge Of Board" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1068" name="CannotMoveOntoBlock" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CannotMoveOntoBlock" methodname="CannotMoveOntoBlock" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="2057344884" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001200" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Move Onto Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1069" name="CannotMoveOverBlock" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CannotMoveOverBlock" methodname="CannotMoveOverBlock" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="1815855366" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001187" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Move Over Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1070" name="MoveThroughWallIsAssumedIfPossible" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.MoveThroughWallIsAssumedIfPossible" methodname="MoveThroughWallIsAssumedIfPossible" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="1357777515" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001192" asserts="0">
                  <properties>
                    <property name="Description" value="Move Through Wall Is Assumed If Possible" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1063" name="RedCannotMoveThroughRedWall" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.RedCannotMoveThroughRedWall" methodname="RedCannotMoveThroughRedWall" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="763795076" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001148" asserts="0">
                  <properties>
                    <property name="Description" value="Red Cannot Move Through Red Wall" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1062" name="RepeatMovesNotAllowed" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.RepeatMovesNotAllowed" methodname="RepeatMovesNotAllowed" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="675122535" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001019" asserts="6">
                  <properties>
                    <property name="Description" value="Repeat Moves Not Allowed" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player moves the piece at e3 to e4
Accepted: e3e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f8cfc55-c7ea-8d9f-0af6-7449cf98dba1-E3-E4.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E3, E4) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
When the red player moves the piece at e4 to e5
Rejected: e4e5: Piece at E4 Has Already Moved This Turn
-> done: ActionSteps.WhenIMove(Red, E4, E5) (0.0s)
Then the action fails
Failed with: Piece at E4 Has Already Moved This Turn
-> done: CommonSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1071" name="SplitRulesFeature" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" testcasecount="18" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.024966" total="18" passed="3" failed="0" warnings="0" inconclusive="15" skipped="0" asserts="15">
                <properties>
                  <property name="Description" value="Split Rules" />
                </properties>
                <test-case id="0-1086" name="BlessedStackLosesBlessingUponSplit_Merge" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.BlessedStackLosesBlessingUponSplit_Merge" methodname="BlessedStackLosesBlessingUponSplit_Merge" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1940027884" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.002300" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Stack Loses Blessing Upon Split-Merge" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1088" name="CannotSplit_MergeBlessedStackOntoKingOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeBlessedStackOntoKingOverStackSizeTwo" methodname="CannotSplit_MergeBlessedStackOntoKingOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1148061721" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001473" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Blessed Stack Onto King Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1087" name="CannotSplit_MergeBlessedStackOntoRegularPieceOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeBlessedStackOntoRegularPieceOverStackSizeTwo" methodname="CannotSplit_MergeBlessedStackOntoRegularPieceOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1366974289" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001172" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Blessed Stack Onto Regular Piece Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1082" name="CannotSplit_MergeOntoCursedPiece" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeOntoCursedPiece" methodname="CannotSplit_MergeOntoCursedPiece" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="965613107" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001912" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Onto Cursed Piece" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1085" name="CannotSplit_MergeOntoKingOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeOntoKingOverStackSizeTwo" methodname="CannotSplit_MergeOntoKingOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="393615678" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001191" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Onto King Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1084" name="CannotSplit_MergeOntoRegularPieceOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeOntoRegularPieceOverStackSizeTwo" methodname="CannotSplit_MergeOntoRegularPieceOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1162354802" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001232" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Onto Regular Piece Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1083" name="CannotSplit_MergeOverBlock" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeOverBlock" methodname="CannotSplit_MergeOverBlock" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1806842928" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001194" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Over Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1080" name="Split_CaptureCannotMoveOverBlock" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_CaptureCannotMoveOverBlock" methodname="Split_CaptureCannotMoveOverBlock" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1947032077" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001237" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Capture Cannot Move Over Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1073" name="Split_CaptureHappyPath" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_CaptureHappyPath" methodname="Split_CaptureHappyPath" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="547286560" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001130" asserts="3">
                  <properties>
                    <property name="Description" value="Split-Capture Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R=E2 B E8 |
  | R:D12E12k6+F1             |
  | B:D78E78k9F5+             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/083b4731-de09-b68b-edca-be011f3f1734.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player splits 1 piece from e6 onto e7
Accepted: e6-1-e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/aa865385-577d-aac7-3912-28c2e901c45a-E6-E7.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, 1, E6, E7) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D12E12k6c7cF1
Successfully validated 7 Red pieces.
-> done: CommonSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12k6c7cF1") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1089" name="Split_MergeBlessedStackOntoBlessedPieceOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MergeBlessedStackOntoBlessedPieceOverStackSizeTwo" methodname="Split_MergeBlessedStackOntoBlessedPieceOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1466414954" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001175" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Merge Blessed Stack Onto Blessed Piece Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1074" name="Split_MergeHappyPath" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MergeHappyPath" methodname="Split_MergeHappyPath" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="431304137" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001277" asserts="6">
                  <properties>
                    <property name="Description" value="Split-Merge Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player merges the piece at e3 into f2
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2bb95324-1990-6880-7344-3f8bc6e10ece-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E3, F2) (0.0s)
And the red player splits 1 piece from f2 onto f1
Accepted: f2-1-f1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/323bfd4a-e930-dde8-3188-8ed715a90869-F1-F2.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, 1, F2, F1) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D12E12kF1+2
Successfully validated 6 Red pieces.
-> done: CommonSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12kF1+2") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1081" name="Split_MergeLeavesCorrectlySizedStacks" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MergeLeavesCorrectlySizedStacks" methodname="Split_MergeLeavesCorrectlySizedStacks" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="418862715" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001256" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Merge Leaves Correctly Sized Stacks" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1078" name="Split_MoveCannotMoveOntoBlock" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MoveCannotMoveOntoBlock" methodname="Split_MoveCannotMoveOntoBlock" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1053027206" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001321" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Move Cannot Move Onto Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1079" name="Split_MoveCannotMoveOverBlock" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MoveCannotMoveOverBlock" methodname="Split_MoveCannotMoveOverBlock" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="809379175" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001356" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Move Cannot Move Over Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1077" name="Split_MoveCursesBothPieces" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MoveCursesBothPieces" methodname="Split_MoveCursesBothPieces" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="74524217" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001429" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Move Curses Both Pieces" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1072" name="Split_MoveHappyPath" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MoveHappyPath" methodname="Split_MoveHappyPath" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="517883204" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001320" asserts="6">
                  <properties>
                    <property name="Description" value="Split-Move Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player merges the piece at e3 into f2
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2bb95324-1990-6880-7344-3f8bc6e10ece-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E3, F2) (0.0s)
And the red player splits 1 piece from f2 onto f3
Accepted: f2-1-f3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3f79924d-8b43-978e-30d1-510532590828-F2-F3.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, 1, F2, F3) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D12E12kF12c3c
Successfully validated 7 Red pieces.
-> done: CommonSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12kF12c3c") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1076" name="SplitDistanceCannotExceedSize" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.SplitDistanceCannotExceedSize" methodname="SplitDistanceCannotExceedSize" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="310199616" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001218" asserts="0">
                  <properties>
                    <property name="Description" value="Split Distance Cannot Exceed Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1075" name="SplitMustRejectInvalidSizes" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.SplitMustRejectInvalidSizes" methodname="SplitMustRejectInvalidSizes" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1658718578" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001239" asserts="0">
                  <properties>
                    <property name="Description" value="Split Must Reject Invalid Sizes" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1090" name="WinLoseRulesFeature" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" testcasecount="14" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.020440" total="14" passed="1" failed="0" warnings="0" inconclusive="13" skipped="0" asserts="4">
                <properties>
                  <property name="Description" value="Win Lose Rules" />
                </properties>
                <test-case id="0-1094" name="BlueCapturingAnyRedKingCausesBlueWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueCapturingAnyRedKingCausesBlueWin" methodname="BlueCapturingAnyRedKingCausesBlueWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="105217370" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001667" asserts="0">
                  <properties>
                    <property name="Description" value="Blue Capturing Any Red King Causes Blue Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1096" name="BlueFormingChainWithKingCausesBlueWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueFormingChainWithKingCausesBlueWin" methodname="BlueFormingChainWithKingCausesBlueWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="471764961" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001418" asserts="0">
                  <properties>
                    <property name="Description" value="Blue Forming Chain With King Causes Blue Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1098" name="BlueJoiningKingToExistingChainCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueJoiningKingToExistingChainCausesRedWin" methodname="BlueJoiningKingToExistingChainCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="428946837" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001224" asserts="0">
                  <properties>
                    <property name="Description" value="Blue Joining King To Existing Chain Causes Red Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1092" name="BlueKingPassingRedWallCausesBlueWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueKingPassingRedWallCausesBlueWin" methodname="BlueKingPassingRedWallCausesBlueWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="159850029" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.002209" asserts="0">
                  <properties>
                    <property name="Description" value="Blue King Passing Red Wall Causes Blue Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1102" name="BlueMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" methodname="BlueMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="823416079" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001687" asserts="0">
                  <properties>
                    <property name="Description" value="Blue Moving Blessed Piece Onto Blue Home Does Not Cause Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1101" name="BlueMovingBlessedPieceOntoRedHomeDoesNotCauseWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueMovingBlessedPieceOntoRedHomeDoesNotCauseWin" methodname="BlueMovingBlessedPieceOntoRedHomeDoesNotCauseWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1058793699" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001245" asserts="0">
                  <properties>
                    <property name="Description" value="Blue Moving Blessed Piece Onto Red Home Does Not Cause Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1104" name="BlueWithNoLegalMovesCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueWithNoLegalMovesCausesRedWin" methodname="BlueWithNoLegalMovesCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="434822314" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001189" asserts="0">
                  <properties>
                    <property name="Description" value="Blue With No Legal Moves Causes Red Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1093" name="RedCapturingAnyBlueKingCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedCapturingAnyBlueKingCausesRedWin" methodname="RedCapturingAnyBlueKingCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1572036968" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001207" asserts="0">
                  <properties>
                    <property name="Description" value="Red Capturing Any Blue King Causes Red Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1095" name="RedFormingChainWithKingCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedFormingChainWithKingCausesRedWin" methodname="RedFormingChainWithKingCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="62952234" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001171" asserts="0">
                  <properties>
                    <property name="Description" value="Red Forming Chain With King Causes Red Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1097" name="RedJoiningKingToExistingChainCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedJoiningKingToExistingChainCausesRedWin" methodname="RedJoiningKingToExistingChainCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="71523427" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001221" asserts="0">
                  <properties>
                    <property name="Description" value="Red Joining King To Existing Chain Causes Red Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1091" name="RedKingPassingBlueWallCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedKingPassingBlueWallCausesRedWin" methodname="RedKingPassingBlueWallCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1268099575" result="Passed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.002029" asserts="4">
                  <properties>
                    <property name="Description" value="Red King Passing Blue Wall Causes Red Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12I5k          |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a35f5ddf-3147-68bb-07d0-8fb31d7ae121.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at i5 to a1
Accepted: i5a1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3f0ceff8-f87b-9005-4ecc-6c276fc8a8e7-A1-I5.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, I5, A1) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> done: CommonSteps.GameOver(Red) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1100" name="RedMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" methodname="RedMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="830396540" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001255" asserts="0">
                  <properties>
                    <property name="Description" value="Red Moving Blessed Piece Onto Blue Home Does Not Cause Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1099" name="RedMovingBlessedPieceOntoRedHomeDoesNotCauseWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedMovingBlessedPieceOntoRedHomeDoesNotCauseWin" methodname="RedMovingBlessedPieceOntoRedHomeDoesNotCauseWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="2139653334" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001243" asserts="0">
                  <properties>
                    <property name="Description" value="Red Moving Blessed Piece Onto Red Home Does Not Cause Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1103" name="RedWithNoLegalMovesCausesBlueWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedWithNoLegalMovesCausesBlueWin" methodname="RedWithNoLegalMovesCausesBlueWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="473396353" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001191" asserts="0">
                  <properties>
                    <property name="Description" value="Red With No Legal Moves Causes Blue Win" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1105" name="WrapAroundRulesFeature" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" testcasecount="19" result="Failed" site="Child" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.036320" total="19" passed="0" failed="1" warnings="0" inconclusive="18" skipped="0" asserts="6">
                <properties>
                  <property name="Description" value="Wrap Around Rules" />
                </properties>
                <failure>
                  <message><![CDATA[One or more child tests had errors]]></message>
                </failure>
                <test-case id="0-1116" name="BlessedPieceWrappingAroundAndMergingCanFormAnyStackSize" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundAndMergingCanFormAnyStackSize" methodname="BlessedPieceWrappingAroundAndMergingCanFormAnyStackSize" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1196296659" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001783" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around and Merging Can Form Any Stack Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1122" name="BlessedPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" methodname="BlessedPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1923544186" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001233" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around and Split Merging Can Form Any Stack Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1119" name="BlessedPieceWrappingAroundAndSplittingLeavesBless_CursePair" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundAndSplittingLeavesBless_CursePair" methodname="BlessedPieceWrappingAroundAndSplittingLeavesBless_CursePair" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1710163384" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001275" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around and Splitting Leaves Bless-Curse Pair" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1111" name="BlessedPieceWrappingAroundOntoHomeBecomesKing" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundOntoHomeBecomesKing" methodname="BlessedPieceWrappingAroundOntoHomeBecomesKing" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1727275888" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001105" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around Onto Home Becomes King" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1108" name="BlessedPieceWrappingAroundRemainsBlessed" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundRemainsBlessed" methodname="BlessedPieceWrappingAroundRemainsBlessed" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="279383159" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001089" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around Remains Blessed" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1114" name="CursedPieceWrappingAroundAndMergingRequiresBlessedTarget" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundAndMergingRequiresBlessedTarget" methodname="CursedPieceWrappingAroundAndMergingRequiresBlessedTarget" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="799131701" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001131" asserts="0">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around and Merging Requires Blessed Target" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1120" name="CursedPieceWrappingAroundAndSplitMergingRequiresBlessedTarget" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundAndSplitMergingRequiresBlessedTarget" methodname="CursedPieceWrappingAroundAndSplitMergingRequiresBlessedTarget" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1643180435" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001135" asserts="0">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around and Split Merging Requires Blessed Target" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1117" name="CursedPieceWrappingAroundAndSplittingRemainsCursed" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundAndSplittingRemainsCursed" methodname="CursedPieceWrappingAroundAndSplittingRemainsCursed" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1174889130" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001148" asserts="0">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around and Splitting Remains Cursed" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1109" name="CursedPieceWrappingAroundOntoHomeBecomesKing" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundOntoHomeBecomesKing" methodname="CursedPieceWrappingAroundOntoHomeBecomesKing" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="984950214" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001782" asserts="0">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around Onto Home Becomes King" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1106" name="CursedPieceWrappingAroundRemainsCursed" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundRemainsCursed" methodname="CursedPieceWrappingAroundRemainsCursed" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="12907095" result="Failed" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.012477" asserts="6">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around Remains Cursed" />
                  </properties>
                  <failure>
                    <message><![CDATA[The following board locations had different contents than expected:
At A1: Expected Size1, SideRed, Cursed, Got Size1, SideRed, Blessed, Cursed
]]></message>
                    <stack-trace><![CDATA[   at Testing.Specflow.Common.CommonSteps.ThenTheBoardHasPiecesMatching(ActionSide side, String definition) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\CommonSteps.cs:line 106
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundRemainsCursed() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WrapAroundRules.feature:line 22
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
And I add this red piece: I5c
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b58cce8c-0fb0-0879-1fcd-45fcc2b5395d.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "I5c") (0.0s)
When the red player moves the piece at i5 to a1
Accepted: i5a1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b02d8913-a425-38b9-8854-7b382e9e6660-A1-I5.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, I5, A1) (0.0s)
Then the action succeeds
-> done: CommonSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: A1cD12E12k3F12
Successfully validated 7 Red pieces.
-> error: The following board locations had different contents than expected:
At A1: Expected Size1, SideRed, Cursed, Got Size1, SideRed, Blessed, Cursed

]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[The following board locations had different contents than expected:
At A1: Expected Size1, SideRed, Cursed, Got Size1, SideRed, Blessed, Cursed
]]></message>
                      <stack-trace><![CDATA[   at Testing.Specflow.Common.CommonSteps.ThenTheBoardHasPiecesMatching(ActionSide side, String definition) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\CommonSteps.cs:line 106
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1124" name="KingStackWrappingAroundAndSplitMergingOntoPieceRemainsBlessedAndWinsGame" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingStackWrappingAroundAndSplitMergingOntoPieceRemainsBlessedAndWinsGame" methodname="KingStackWrappingAroundAndSplitMergingOntoPieceRemainsBlessedAndWinsGame" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1214286966" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001514" asserts="0">
                  <properties>
                    <property name="Description" value="King Stack Wrapping Around and Split Merging Onto Piece Remains Blessed and Wins Game" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1123" name="KingWrappingAroundAndMergingOntoPieceRemainsBlessedAndWinsGame" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingWrappingAroundAndMergingOntoPieceRemainsBlessedAndWinsGame" methodname="KingWrappingAroundAndMergingOntoPieceRemainsBlessedAndWinsGame" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1484918455" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001352" asserts="0">
                  <properties>
                    <property name="Description" value="King Wrapping Around And Merging Onto Piece Remains Blessed and Wins Game" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1113" name="KingWrappingAroundOntoHomeWinsGame" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingWrappingAroundOntoHomeWinsGame" methodname="KingWrappingAroundOntoHomeWinsGame" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="606019217" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001426" asserts="0">
                  <properties>
                    <property name="Description" value="King Wrapping Around Onto Home Wins Game" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1112" name="KingWrappingAroundOntoRegularSpaceWinsGame" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingWrappingAroundOntoRegularSpaceWinsGame" methodname="KingWrappingAroundOntoRegularSpaceWinsGame" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="153752327" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001238" asserts="0">
                  <properties>
                    <property name="Description" value="King Wrapping Around Onto Regular Space Wins Game" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1107" name="NormalPieceWrappingAroundBecomesBlessed" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.NormalPieceWrappingAroundBecomesBlessed" methodname="NormalPieceWrappingAroundBecomesBlessed" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1548797998" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001242" asserts="0">
                  <properties>
                    <property name="Description" value="Normal Piece Wrapping Around Becomes Blessed" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1110" name="NormalPieceWrappingAroundOntoHomeBecomesKing" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.NormalPieceWrappingAroundOntoHomeBecomesKing" methodname="NormalPieceWrappingAroundOntoHomeBecomesKing" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="251264637" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001216" asserts="0">
                  <properties>
                    <property name="Description" value="Normal Piece Wrapping Around Onto Home Becomes King" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1115" name="RegularPieceWrappingAroundAndMergingCanFormAnyStackSize" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.RegularPieceWrappingAroundAndMergingCanFormAnyStackSize" methodname="RegularPieceWrappingAroundAndMergingCanFormAnyStackSize" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1557964154" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001191" asserts="0">
                  <properties>
                    <property name="Description" value="Regular Piece Wrapping Around and Merging Can Form Any Stack Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1121" name="RegularPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.RegularPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" methodname="RegularPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1425169344" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001215" asserts="0">
                  <properties>
                    <property name="Description" value="Regular Piece Wrapping Around and Split Merging Can Form Any Stack Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
                <test-case id="0-1118" name="RegularPieceWrappingAroundAndSplittingLeavesBless_CursePair" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.RegularPieceWrappingAroundAndSplittingLeavesBless_CursePair" methodname="RegularPieceWrappingAroundAndSplittingLeavesBless_CursePair" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1298356199" result="Inconclusive" start-time="2020-02-02 18:16:59Z" end-time="2020-02-02 18:16:59Z" duration="0.001217" asserts="0">
                  <properties>
                    <property name="Description" value="Regular Piece Wrapping Around and Splitting Leaves Bless-Curse Pair" />
                  </properties>
                  <reason>
                    <message><![CDATA[This test isn't written yet.]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> error: This test isn't written yet.
]]></output>
                </test-case>
              </test-suite>
            </test-suite>
          </test-suite>
        </test-suite>
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>