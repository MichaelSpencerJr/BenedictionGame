<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="2" testcasecount="114" result="Failed" total="114" passed="67" failed="9" inconclusive="38" skipped="0" asserts="754" engine-version="3.10.0.0" clr-version="4.0.30319.42000" start-time="2020-02-07 01:48:31Z" end-time="2020-02-07 01:48:37Z" duration="5.918464">
  <command-line><![CDATA["C:\ProgramData\chocolatey\lib\nunit-console-runner\tools\nunit3-console.exe" ..\..\src\Testing\Specflow\bin\Debug\Testing.Specflow.dll --result=report.txt;transform=..\..\..\nunit-transforms\nunit3-summary\text-report.xslt --result=report.html;transform=..\..\..\nunit-transforms\nunit3-summary\html-report.xslt --result=readme.md;transform=..\md-report.xslt --result=TestResult.xml]]></command-line>
  <test-suite type="Assembly" id="0-1126" name="Testing.Specflow.dll" fullname="F:\src\BenedictionGame\src\Testing\Specflow\bin\Debug\Testing.Specflow.dll" runstate="Runnable" testcasecount="114" result="Failed" site="Child" start-time="2020-02-07 01:48:31Z" end-time="2020-02-07 01:48:37Z" duration="5.464278" total="114" passed="67" failed="9" warnings="0" inconclusive="38" skipped="0" asserts="754">
    <environment framework-version="3.12.0.0" clr-version="4.0.30319.42000" os-version="Microsoft Windows NT 10.0.17134.0" platform="Win32NT" cwd="F:\src\BenedictionGame\testruns\latest" machine-name="SPENCER-VR" user="Oculus Rift" user-domain="SPENCER-VR" culture="en-US" uiculture="en-US" os-architecture="x64" />
    <settings>
      <setting name="DisposeRunners" value="True" />
      <setting name="WorkDirectory" value="F:\src\BenedictionGame\testruns\latest" />
      <setting name="ImageRuntimeVersion" value="4.0.30319" />
      <setting name="ImageTargetFrameworkName" value=".NETFramework,Version=v4.7.1" />
      <setting name="ImageRequiresX86" value="False" />
      <setting name="ImageRequiresDefaultAppDomainAssemblyResolver" value="False" />
      <setting name="NumberOfTestWorkers" value="12" />
    </settings>
    <properties>
      <property name="_PID" value="19316" />
      <property name="_APPDOMAIN" value="domain-" />
    </properties>
    <failure>
      <message><![CDATA[One or more child tests had errors]]></message>
    </failure>
    <test-suite type="SetUpFixture" id="0-1000" name="[default namespace]" fullname="Testing_Specflow_NUnitAssemblyHooks" classname="Testing_Specflow_NUnitAssemblyHooks" runstate="Runnable" testcasecount="114" result="Failed" site="Child" start-time="2020-02-07 01:48:31Z" end-time="2020-02-07 01:48:37Z" duration="5.447672" total="114" passed="67" failed="9" warnings="0" inconclusive="38" skipped="0" asserts="754">
      <failure>
        <message><![CDATA[One or more child tests had errors]]></message>
      </failure>
      <output><![CDATA[-> Loading plugin F:\src\BenedictionGame\src\Testing\Specflow\bin\Debug\TechTalk.SpecFlow.NUnit.SpecFlowPlugin.dll
-> Using default config
]]></output>
      <test-suite type="TestSuite" id="0-1127" name="Testing" fullname="Testing" runstate="Runnable" testcasecount="114" result="Failed" site="Child" start-time="2020-02-07 01:48:32Z" end-time="2020-02-07 01:48:37Z" duration="4.833591" total="114" passed="67" failed="9" warnings="0" inconclusive="38" skipped="0" asserts="754">
        <failure>
          <message><![CDATA[One or more child tests had errors]]></message>
        </failure>
        <test-suite type="TestSuite" id="0-1128" name="Specflow" fullname="Testing.Specflow" runstate="Runnable" testcasecount="114" result="Failed" site="Child" start-time="2020-02-07 01:48:32Z" end-time="2020-02-07 01:48:37Z" duration="4.833569" total="114" passed="67" failed="9" warnings="0" inconclusive="38" skipped="0" asserts="754">
          <failure>
            <message><![CDATA[One or more child tests had errors]]></message>
          </failure>
          <test-suite type="TestSuite" id="0-1129" name="Features" fullname="Testing.Specflow.Features" runstate="Runnable" testcasecount="114" result="Failed" site="Child" start-time="2020-02-07 01:48:32Z" end-time="2020-02-07 01:48:37Z" duration="4.833563" total="114" passed="67" failed="9" warnings="0" inconclusive="38" skipped="0" asserts="754">
            <failure>
              <message><![CDATA[One or more child tests had errors]]></message>
            </failure>
            <test-suite type="TestSuite" id="0-1131" name="ExampleGames" fullname="Testing.Specflow.Features.ExampleGames" runstate="Runnable" testcasecount="1" result="Passed" start-time="2020-02-07 01:48:32Z" end-time="2020-02-07 01:48:34Z" duration="1.519310" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="261">
              <test-suite type="TestFixture" id="0-1124" name="AlekSamplesFeature" fullname="Testing.Specflow.Features.ExampleGames.AlekSamplesFeature" classname="Testing.Specflow.Features.ExampleGames.AlekSamplesFeature" runstate="Runnable" testcasecount="1" result="Passed" start-time="2020-02-07 01:48:32Z" end-time="2020-02-07 01:48:34Z" duration="1.518357" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="261">
                <properties>
                  <property name="Description" value="Alek Samples" />
                </properties>
                <test-case id="0-1125" name="AlekSampleGame1" fullname="Testing.Specflow.Features.ExampleGames.AlekSamplesFeature.AlekSampleGame1" methodname="AlekSampleGame1" classname="Testing.Specflow.Features.ExampleGames.AlekSamplesFeature" runstate="Runnable" seed="221912109" result="Passed" start-time="2020-02-07 01:48:32Z" end-time="2020-02-07 01:48:34Z" duration="1.463058" asserts="261">
                  <properties>
                    <property name="Description" value="Alek Sample Game 1" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.1s)
When the following moves are performed:
  --- table step argument ---
  | RedAction1 | RedAction2 | BlueAction1 | BlueAction2 |
  | e3e4       | @e3        | f8+f7       | @f8         |
  | d1+d2      | @d1        | d7d6        | @d7         |
  | f1+f2      | @f1        | f7f5        | @f7         |
  | f2f4       | f4-1-f5    | d7+d6       | d6b4        |
  | d2f3       | @f2        | b4b2        | Bc2         |
  | f3h3       | f1+f2      | b2i5        | e9+f8       |
  | h3h5       | h5-1-i5    | @e9         | @d7         |
  | f4g4       | f2f4       | f8h6        | h6-1-i5     |
  | e3+e4      | h5i5       | h6i5        | @f8         |
  | f4d5       | e4e5       | e8+e9       | Bc7         |
  | e1+e2      | e2e4       | f7+e7       | e7e5        |
  | e4e5       | d5e6       | Be7         | @f7         |
  | e5c5       | Ba5        | d8+d7       | @d8         |
  | e6c6       | c6-1-d7    | d8d7        | @d8         |
  | c5b4       | c6d7       |             |             |
Accepted: e3e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f8cfc55-c7ea-8d9f-0af6-7449cf98dba1-E3-E4.png?raw=true)
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5182a0c2-1497-e92b-e861-6a4831aba196-E3.png?raw=true)
Accepted: f8+f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/246ade30-9149-6e15-1754-5c585fbe12f6-F7-F8.png?raw=true)
Accepted: @f8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2a36d76d-78f8-b4d4-278b-c252c0132438-F8.png?raw=true)
Accepted: d1+d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/412215e4-91f3-c0db-694a-f3c099d58ce1-D1-D2.png?raw=true)
Accepted: @d1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0fd5b26e-b69d-9c51-bc0f-b9a7ef11330e-D1.png?raw=true)
Accepted: d7d6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/84bd4ce7-479a-dc84-152a-5bb470124c94-D6-D7.png?raw=true)
Accepted: @d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/892498d2-57e1-d2e1-ef39-9a26316cae87-D7.png?raw=true)
Accepted: f1+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e7bf8bac-aaa3-6e9c-7e05-52587c930053-F1-F2.png?raw=true)
Accepted: @f1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d4383f3d-960a-3413-23be-45d6694e109d-F1.png?raw=true)
Accepted: f7f5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/bddc193d-3577-f592-a629-1f83b22a064c-F5-F7.png?raw=true)
Accepted: @f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/aced0ec3-c164-6d6e-7354-f84e43060853-F7.png?raw=true)
Accepted: f2f4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/462d066e-518c-f89c-d13f-f33e88f35262-F2-F4.png?raw=true)
Accepted: f4-1-f5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c2deb277-8566-eaa1-a4a8-a346415328d9-F4-F5.png?raw=true)
Accepted: d7+d6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/69c732c2-612e-1ce4-9473-0c90e71bc801-D6-D7.png?raw=true)
Accepted: d6b4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c6a71c27-1553-a846-bc81-8d9d92103183-B4-D6.png?raw=true)
Accepted: d2f3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/78b3e894-b5d2-99ce-2981-0a7bb28d0f08-D2-F3.png?raw=true)
Accepted: @f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e85ac896-837e-daf4-083a-9c1ab03d5074-F2.png?raw=true)
Accepted: b4b2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/9e7ceb29-67d3-42a8-a381-3d4862c708ed-B2-B4.png?raw=true)
Accepted: Bc2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/698df008-1472-7591-fd72-de4de7b099b0-C2.png?raw=true)
Accepted: f3h3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7100041e-bc5d-3007-f3ba-56ea4f1226c7-F3-H3.png?raw=true)
Accepted: f1+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ba82f962-da6e-8719-7031-45bc05c4710b-F1-F2.png?raw=true)
Accepted: b2i5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/20e8f512-0ebe-3bbf-fabc-cff2d32943ef-B2-I5.png?raw=true)
Accepted: e9+f8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/add6a93f-195a-0629-b65f-c3e3645c0956-E9-F8.png?raw=true)
Accepted: h3h5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/832c0e80-803e-b6ad-fdb1-e26b1d0d7881-H3-H5.png?raw=true)
Accepted: h5-1-i5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c113ab50-fda5-5a8a-72ad-a000f7b851ae-H5-I5.png?raw=true)
Accepted: @e9
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/977ba4fe-26c4-2cd8-87f1-9f122b0f604b-E9.png?raw=true)
Accepted: @d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/70a1c945-25ab-f152-3284-e3548ff809de-D7.png?raw=true)
Accepted: f4g4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4ed658a3-82f5-05cc-130f-4d5b299ec475-F4-G4.png?raw=true)
Accepted: f2f4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/9a59a1cf-68e1-38bd-b59b-930ed2d4e622-F2-F4.png?raw=true)
Accepted: f8h6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/417e5ae0-f267-6403-df0a-83e1b767b344-F8-H6.png?raw=true)
Accepted: h6-1-i5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/13576040-16af-1bc1-00a6-970cceb0e638-H6-I5.png?raw=true)
Accepted: e3+e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ca93e6b4-e3dd-2bd6-5653-7c8201d9aa71-E3-E4.png?raw=true)
Accepted: h5i5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3236547e-9a18-c636-96b9-01f0e11d2247-H5-I5.png?raw=true)
Accepted: h6i5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1c5feb37-70fa-fefa-91be-3b7ffbcfb2d0-H6-I5.png?raw=true)
Accepted: @f8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b2030054-cefb-f25d-6ebf-e30e4cb54a55-F8.png?raw=true)
Accepted: f4d5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7f538c98-0659-e305-dc48-67af7a44eb0e-D5-F4.png?raw=true)
Accepted: e4e5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7a31c5a1-7013-00f7-586c-51fa1261e3be-E4-E5.png?raw=true)
Accepted: e8+e9
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5486a738-3525-064a-e505-dcf19f7d1bce-E8-E9.png?raw=true)
Accepted: Bc7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b2e8be61-98e6-d12e-256c-263987c6292a-C7.png?raw=true)
Accepted: e1+e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ec3d4e52-f68c-5330-4572-e506aa1c025d-E1-E2.png?raw=true)
Accepted: e2e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/667a0689-0074-5026-3f4b-18e2b2c8ce22-E2-E4.png?raw=true)
Accepted: f7+e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ff4bb56e-3e38-6c84-f248-184b56308161-E7-F7.png?raw=true)
Accepted: e7e5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ecb771ba-e27c-698b-940b-29d18f3dcf6a-E5-E7.png?raw=true)
Accepted: e4e5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/cce4a8ab-151d-b2bd-1fe7-42ca6713778f-E4-E5.png?raw=true)
Accepted: d5e6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/949af7e8-dbbe-a07a-79e9-69db64804c02-D5-E6.png?raw=true)
Accepted: Be7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/05ce5c65-06c6-c9c7-ed69-e05b5a54514c-E7.png?raw=true)
Accepted: @f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/08eb9363-2960-f18d-5269-e4046a2cf59f-F7.png?raw=true)
Accepted: e5c5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/df666ba2-e203-2ac2-be49-4434e496a98f-C5-E5.png?raw=true)
Accepted: Ba5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4c00cc2d-d800-9fed-78f9-e9d23938ed1a-A5.png?raw=true)
Accepted: d8+d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a35d3439-ec84-af0f-b7b2-a4187037965b-D7-D8.png?raw=true)
Accepted: @d8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ac999153-ca4b-8acb-2b0b-c24140bb2466-D8.png?raw=true)
Accepted: e6c6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d23babbf-5b8d-b756-2c94-fa3af912fe37-C6-E6.png?raw=true)
Accepted: c6-1-d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/32d32974-62f4-755d-7a03-38ea67beccc6-C6-D7.png?raw=true)
Accepted: d8d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/97338497-3862-93ee-e843-38e4260b4082-D7-D8.png?raw=true)
Accepted: @d8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/325e409a-1c86-89f9-525b-9b863dc08392-D8.png?raw=true)
Accepted: c5b4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/55eed42c-b69b-8cfe-df94-34ac94b045c0-B4-C5.png?raw=true)
Accepted: c6d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/fa0292c9-9df4-c4b7-986e-45d432ea12e9-C6-D7.png?raw=true)
-> done: ActionSteps.WhenTheFollowingMoves(<table>) (1.3s)
Then the following locations match:
  --- table step argument ---
  | Location | Contents | Size | Type   |
  | A5       | Block    |      |        |
  | C7       | Block    |      |        |
  | C2       | Block    |      |        |
  | E7       | Block    |      |        |
  | D1       | Red      | 1    | Normal |
  | B4       | Red      | 2    | King   |
  | D7       | Red      | 1    | Cursed |
  | F5       | Red      | 1    | Cursed |
  | G4       | Red      | 1    | Cursed |
  | D8       | Blue     | 1    | Normal |
  | E9       | Blue     | 2    | King   |
  | F7       | Blue     | 1    | Normal |
  | F8       | Blue     | 1    | Normal |
  | I5       | Blue     | 1    | Cursed |
A5 OK
C7 OK
C2 OK
E7 OK
D1 OK
B4 OK
D7 OK
F5 OK
G4 OK
D8 OK
E9 OK
F7 OK
F8 OK
I5 OK
-> done: ValidationSteps.ThenTheFollowingLocationsMatch(<table>) (0.0s)
]]></output>
                </test-case>
              </test-suite>
            </test-suite>
            <test-suite type="TestSuite" id="0-1130" name="GameRules" fullname="Testing.Specflow.Features.GameRules" runstate="Runnable" testcasecount="113" result="Failed" site="Child" start-time="2020-02-07 01:48:32Z" end-time="2020-02-07 01:48:37Z" duration="4.833553" total="113" passed="66" failed="9" warnings="0" inconclusive="38" skipped="0" asserts="493">
              <failure>
                <message><![CDATA[One or more child tests had errors]]></message>
              </failure>
              <test-suite type="TestFixture" id="0-1001" name="BlockRulesFeature" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" testcasecount="5" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.370803" total="5" passed="5" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="80">
                <properties>
                  <property name="Description" value="Block Rules" />
                </properties>
                <test-case id="0-1002" name="BlockHappyPath" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.BlockHappyPath" methodname="BlockHappyPath" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="647373617" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.025273" asserts="5">
                  <properties>
                    <property name="Description" value="Block Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player blockades A1
Accepted: Ba1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e5c4514c-8802-69fd-4f37-202fa92f03ef-A1.png?raw=true)
-> done: ActionSteps.WhenIBlockade(Red, A1) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has blocks matching: A1
Successfully validated 1 block.
-> done: ValidationSteps.ThenTheBoardHasBlocksMatching("A1") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1003" name="BlockMaximum" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.BlockMaximum" methodname="BlockMaximum" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="870167201" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.324393" asserts="62">
                  <properties>
                    <property name="Description" value="Block Maximum" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
When the following moves are performed:
  --- table step argument ---
  | RedAction1 | RedAction2 | BlueAction1 | BlueAction2 |
  | Bd2        | Bf2        | Be1         | Be9         |
  | Bd7        | Bf7        | Bb6         | Bc5         |
  | Ba4        | Bg5        | Bh6         | Bi4         |
  | Bg3        | Bh1        | Bi2         | Bc3         |
  | Bb1        | Ba2        | Be6         | Be4         |
Accepted: Bd2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7984a007-2498-ec86-293c-638dcd7f4904-D2.png?raw=true)
Accepted: Bf2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0b4d0cd9-431b-4457-e1f2-c7848684822d-F2.png?raw=true)
Accepted: Be1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/397aa385-a656-c736-2aeb-735614b775b5-E1.png?raw=true)
Accepted: Be9
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c665e17f-24ba-77bd-cc15-2ca775d17faf-E9.png?raw=true)
Accepted: Bd7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3966703c-bf98-4c0a-6435-a3b87b0e3cf1-D7.png?raw=true)
Accepted: Bf7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8cafa76e-7420-3556-9aca-6d2114d9e333-F7.png?raw=true)
Accepted: Bb6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/55bde147-30e1-59c6-3420-4149aa00bcba-B6.png?raw=true)
Accepted: Bc5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/be0d15be-5426-3d22-53d4-e43bdf5ceb83-C5.png?raw=true)
Accepted: Ba4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/029566ff-30c0-c0d2-d1c9-a7f7c00261e4-A4.png?raw=true)
Accepted: Bg5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/25cc0394-003c-6b5b-e5a9-f429b04f3821-G5.png?raw=true)
Accepted: Bh6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4ec9d589-d95e-5b7c-5486-c8791d542420-H6.png?raw=true)
Accepted: Bi4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4ccddfda-5b2b-fca7-7201-df449503d573-I4.png?raw=true)
Accepted: Bg3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/68ad6e35-73cb-2ce9-bdac-c4c4e041500a-G3.png?raw=true)
Accepted: Bh1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/58f58c4a-f2d9-5e5c-71bc-1c273473ab1a-H1.png?raw=true)
Accepted: Bi2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f9b6d123-09b2-adb2-cf37-bbbcb6e18af3-I2.png?raw=true)
Accepted: Bc3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1c5a59f4-1915-c3fb-1833-5b68d66fca9c-C3.png?raw=true)
Accepted: Bb1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/68b93422-6668-fe2b-463c-123ef13aec1c-B1.png?raw=true)
Accepted: Ba2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c875f2da-0c42-39c7-29e2-da23aafb95fb-A2.png?raw=true)
Accepted: Be6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f17b7eb-ff6d-6b64-fd2b-8a2e2c8c63b9-E6.png?raw=true)
Accepted: Be4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5be7070c-b19f-276f-bbdf-d214f222b5d3-E4.png?raw=true)
-> done: ActionSteps.WhenTheFollowingMoves(<table>) (0.3s)
Then the board has blocks matching: A24B16C35D27E1469F27G35H16I24
Successfully validated 20 blocks.
-> done: ValidationSteps.ThenTheBoardHasBlocksMatching("A24B16C35D27E1469...") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1005" name="CannotBlockAdjacentAnotherBlock" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.CannotBlockAdjacentAnotherBlock" methodname="CannotBlockAdjacentAnotherBlock" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="2060342711" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.018584" asserts="5">
                  <properties>
                    <property name="Description" value="Cannot Block Adjacent Another Block" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
When the red player blocks e3
Accepted: Be3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/583156d7-4d7e-ea5b-fd2f-8b76e96ea48a-E3.png?raw=true)
-> done: ActionSteps.WhenIBlockade(Red, E3) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
When the red player blocks e4
Rejected: Be4: Cannot Block Adjacent Existing Block E3
-> done: ActionSteps.WhenIBlockade(Red, E4) (0.0s)
Then the action fails
Failed with: Cannot Block Adjacent Existing Block E3
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
And the board has blocks matching: E3
Successfully validated 1 block.
-> done: ValidationSteps.ThenTheBoardHasBlocksMatching("E3") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1004" name="CannotBlockHomeSpace" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.CannotBlockHomeSpace" methodname="CannotBlockHomeSpace" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="1691317764" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.001053" asserts="4">
                  <properties>
                    <property name="Description" value="Cannot Block Home Space" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
When the red player blocks e2
Rejected: Be2: Cannot Block Red Home at Location E2
-> done: ActionSteps.WhenIBlockade(Red, E2) (0.0s)
Then the action fails
Failed with: Cannot Block Red Home at Location E2
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the red player blocks e8
Rejected: Be8: Cannot Block Blue Home at Location E8
-> done: ActionSteps.WhenIBlockade(Red, E8) (0.0s)
Then the action fails
Failed with: Cannot Block Blue Home at Location E8
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1006" name="CannotBlockOccupiedSpace" fullname="Testing.Specflow.Features.GameRules.BlockRulesFeature.CannotBlockOccupiedSpace" methodname="CannotBlockOccupiedSpace" classname="Testing.Specflow.Features.GameRules.BlockRulesFeature" runstate="Runnable" seed="721976776" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.000972" asserts="4">
                  <properties>
                    <property name="Description" value="Cannot Block Occupied Space" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player blockades e3
Rejected: Be3: Location E3 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E3) (0.0s)
Then the action fails
Failed with: Location E3 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1007" name="BridgeRulesFeature" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" testcasecount="7" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.353862" total="7" passed="7" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="25">
                <properties>
                  <property name="Description" value="Bridge Rules" />
                </properties>
                <test-case id="0-1013" name="BridgeCannotBlessCursedPieces" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.BridgeCannotBlessCursedPieces" methodname="BridgeCannotBlessCursedPieces" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="650908484" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.060827" asserts="3">
                  <properties>
                    <property name="Description" value="Bridge Cannot Bless Cursed Pieces" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                         |
  | Benediction v1: R-E2 B E8     |
  | R:D12E12k3F6++G1c+2cH2c3c5c6c |
  | B:E8k                         |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/814cb5e2-fc1a-36e5-5d1a-8c14a9e50781.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player splits 2 pieces from f6 to h4
Accepted: f6-2-h4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/09674cbf-9813-00b5-2a75-57eb8b4d96cd-F6-H4.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "2", F6, H4) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D12E12k3F6cG1c+2cH2c3c4b+5c6c
Successfully validated 13 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12k3F6cG1c+2c...") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1008" name="BridgeHappyPath" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.BridgeHappyPath" methodname="BridgeHappyPath" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="362779018" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.054976" asserts="2">
                  <properties>
                    <property name="Description" value="Bridge Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:C2D13E12k4F124G4H4I45   |
  | B:A12B3C4D578E68k9F68G6   |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/78ef14af-3123-d5a7-50c7-8f649cc50dcb.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at d1 to c1
Accepted: d1c1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/93c3cb3a-25de-716b-775a-323c64b91731-C1-D1.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, D1, C1) (0.0s)
Then the board has red pieces matching: C1b2bD3bE12k4bF124bG4bH4bI4b5b
Successfully validated 13 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "C1b2bD3bE12k4bF12...") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1009" name="BridgeMaximum" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.BridgeMaximum" methodname="BridgeMaximum" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1605592259" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.059924" asserts="5">
                  <properties>
                    <property name="Description" value="Bridge Maximum" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                                   |
  | Benediction v1: R-E2 B E8               |
  | R:A14B245C246D468E2k468kF2467G246H24I23 |
  | B:E7k                                   |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d95525f1-17d2-eac0-1f5d-6cdb34d27096.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player drops a new piece at d2
Accepted: @d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/79afa5f7-217d-4829-2409-47c55f1e4404-D2.png?raw=true)
-> done: ActionSteps.WhenIDrop(Red, D2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> done: ValidationSteps.GameOver(Red) (0.0s)
And the board has red pieces matching: A1b4bB2b4b5bC2b4b6bD2b4b6b8bE2kb4b6b8kbF2b4b6b7bG2b4b6bH2b4bI2b3b
Successfully validated 27 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "A1b4bB2b4b5bC2b4b...") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1010" name="BridgeWithWrongColorCriticalPiece" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.BridgeWithWrongColorCriticalPiece" methodname="BridgeWithWrongColorCriticalPiece" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1677304645" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.043817" asserts="4">
                  <properties>
                    <property name="Description" value="Bridge With Wrong Color Critical Piece" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B-E8 |
  | R:D12E12k3F12G2H2356      |
  | B:E8kG4                   |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b3562125-3cee-c7e2-67c3-b4b411cfe6ec.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves the piece at g4 to h4
Accepted: g4h4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/cf5044be-c432-3746-1739-2868884df9e7-G4-H4.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, G4, H4) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has blue pieces matching: E8kH4
Successfully validated 2 Blue pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Blue, "E8kH4") (0.0s)
And the board has red pieces matching: D12E12k3F12G2H2356
Successfully validated 12 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12k3F12G2H2356") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1014" name="HomeDropCompletingBridgeWinsGame" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.HomeDropCompletingBridgeWinsGame" methodname="HomeDropCompletingBridgeWinsGame" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1953024991" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.041436" asserts="5">
                  <properties>
                    <property name="Description" value="Home Drop Completing Bridge Wins Game" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:A1kE1345F5G5H5I5        |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5dbd8ef0-9411-39f4-eb9b-ddc996f39edf.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player drops a new piece at e2
Accepted: @e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d6a96ffe-9413-bf7b-9660-93853325811a-E2.png?raw=true)
-> done: ActionSteps.WhenIDrop(Red, E2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: A1kE1b2kb3b4b5bF5bG5bH5bI5b
Successfully validated 10 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "A1kE1b2kb3b4b5bF5...") (0.0s)
And the game is over and red has won
-> done: ValidationSteps.GameOver(Red) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1011" name="SplitIntoBridgeAvoidsAllCursesIfSplitPiecesAdjacent" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.SplitIntoBridgeAvoidsAllCursesIfSplitPiecesAdjacent" methodname="SplitIntoBridgeAvoidsAllCursesIfSplitPiecesAdjacent" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="341875105" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.045973" asserts="3">
                  <properties>
                    <property name="Description" value="Split Into Bridge Avoids All Curses If Split Pieces Adjacent" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12G25+H2356    |
  | B:E8k                     |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ff3696be-88c4-9dc3-f7b8-aed219f754b5.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player splits 1 piece from g5 to h4
Accepted: g5-1-h4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/64c2001a-950d-eff3-424b-0960ac0160b8-G5-H4.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "1", G5, H4) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D1b2bE1b2kb3bF1b2bG2b5bH2b3b4b5b6b
Successfully validated 14 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D1b2bE1b2kb3bF1b2...") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1012" name="SplitIntoBridgeAvoidsTargetCurseIfTargetPieceAdjacent" fullname="Testing.Specflow.Features.GameRules.BridgeRulesFeature.SplitIntoBridgeAvoidsTargetCurseIfTargetPieceAdjacent" methodname="SplitIntoBridgeAvoidsTargetCurseIfTargetPieceAdjacent" classname="Testing.Specflow.Features.GameRules.BridgeRulesFeature" runstate="Runnable" seed="1566875406" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.046256" asserts="3">
                  <properties>
                    <property name="Description" value="Split Into Bridge Avoids Target Curse If Target Piece Adjacent" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F126++G2H2356   |
  | B:E8k                     |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/739759a2-cf38-4707-eaad-df778518d406.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player splits 2 pieces from f6 to h4
Accepted: f6-2-h4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/45498da7-e1bd-7f71-cd92-9887ed24c76f-F6-H4.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "2", F6, H4) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D1b2bE1b2kb3bF1b2b6cG2bH2b3b4b+5b6b
Successfully validated 14 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D1b2bE1b2kb3bF1b2...") (0.0s)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1015" name="DropRulesFeature" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" testcasecount="5" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.119527" total="5" passed="5" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="19">
                <properties>
                  <property name="Description" value="Drop Rules" />
                </properties>
                <test-case id="0-1018" name="CannotDropOntoBlock" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.CannotDropOntoBlock" methodname="CannotDropOntoBlock" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="921528635" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.024677" asserts="2">
                  <properties>
                    <property name="Description" value="Cannot Drop Onto Block" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12kF12              |
  | B:D78E78k9F78             |
  | X:E3                      |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/05727d7d-a822-e663-e593-85887fdd5e22.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player drops a new piece at e3
Rejected: @e3: Location E3 Not Empty
-> done: ActionSteps.WhenIDrop(Red, E3) (0.0s)
Then the action fails
Failed with: Location E3 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1019" name="CannotDropOntoOccupiedSpace" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.CannotDropOntoOccupiedSpace" methodname="CannotDropOntoOccupiedSpace" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="1609505440" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.000904" asserts="4">
                  <properties>
                    <property name="Description" value="Cannot Drop Onto Occupied Space" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player drops a new piece at e3
Rejected: @e3: Location E3 Not Empty
-> done: ActionSteps.WhenIDrop(Red, E3) (0.0s)
Then the action fails
Failed with: Location E3 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1017" name="CannotDropOutsideZone" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.CannotDropOutsideZone" methodname="CannotDropOutsideZone" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="1440767816" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.000852" asserts="4">
                  <properties>
                    <property name="Description" value="Cannot Drop Outside Zone" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player drops a new piece at e5
Rejected: @e5: Drop Must Be Adjacent Your Home At E2
-> done: ActionSteps.WhenIDrop(Red, E5) (0.0s)
Then the action fails
Failed with: Drop Must Be Adjacent Your Home At E2
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1016" name="DropHappyPath" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.DropHappyPath" methodname="DropHappyPath" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="1426352400" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.049521" asserts="6">
                  <properties>
                    <property name="Description" value="Drop Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player merges the piece at e3 into f2
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2bb95324-1990-6880-7344-3f8bc6e10ece-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E3, F2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
When the red player drops a new piece at e3
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/290c59e7-37b9-974f-069c-26f19bc400fb-E3.png?raw=true)
-> done: ActionSteps.WhenIDrop(Red, E3) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1020" name="HomeDropBecomesKing" fullname="Testing.Specflow.Features.GameRules.DropRulesFeature.HomeDropBecomesKing" methodname="HomeDropBecomesKing" classname="Testing.Specflow.Features.GameRules.DropRulesFeature" runstate="Runnable" seed="1551200730" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.043060" asserts="3">
                  <properties>
                    <property name="Description" value="Home Drop Becomes King" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E13kF12              |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e0431d0b-1adc-1d00-8381-6904a3edfbbc.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player drops a new piece at e2
Accepted: @e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1380d8a2-14ab-4671-c85a-bd608dee0f0c-E2.png?raw=true)
-> done: ActionSteps.WhenIDrop(Red, E2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D12E12k3kF12
Successfully validated 7 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12k3kF12") (0.0s)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1021" name="ExamplesFeature" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" testcasecount="22" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:36Z" duration="1.072508" total="22" passed="22" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="208">
                <properties>
                  <property name="Description" value="Examples" />
                </properties>
                <test-case id="0-1028" name="CannotBlockOwnKing" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.CannotBlockOwnKing" methodname="CannotBlockOwnKing" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1170263943" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.001810" asserts="4">
                  <properties>
                    <property name="Description" value="Cannot Block Own King" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
When red does Be2
Rejected: Be2: Cannot Block Red Home at Location E2
-> done: ActionSteps.WhenDoes(Red, "Be2") (0.0s)
Then the action fails
Failed with: Cannot Block Red Home at Location E2
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1022" name="LoadAPreviouslyCreatedBoard" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.LoadAPreviouslyCreatedBoard" methodname="LoadAPreviouslyCreatedBoard" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1163640501" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.026679" asserts="2">
                  <properties>
                    <property name="Description" value="Load a Previously Created Board" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I have board WeirdSituation1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f79d54ef-f62b-8a94-2d61-34eec0fee5b4.png?raw=true)
Loaded board WeirdSituation1.
-> done: SetupSteps.GivenIHaveNamedBoard("WeirdSituation1") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1024" name="LoadASavedBoard" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.LoadASavedBoard" methodname="LoadASavedBoard" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="69971359" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:34Z" duration="0.000962" asserts="0">
                  <properties>
                    <property name="Description" value="Load a Saved Board" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                       |
  | Benediction v1: R E2 B-E8   |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+ |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+ |
  | X:B5C2D4E6F3H6I1            |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f79d54ef-f62b-8a94-2d61-34eec0fee5b4.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1029" name="MergeSplitMergeDoesntCreatePieces" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.MergeSplitMergeDoesntCreatePieces" methodname="MergeSplitMergeDoesntCreatePieces" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="2133723671" result="Passed" start-time="2020-02-07 01:48:34Z" end-time="2020-02-07 01:48:35Z" duration="0.038964" asserts="3">
                  <properties>
                    <property name="Description" value="Merge Split Merge Doesn't Create Pieces" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player merges the piece at f2 onto e3
Accepted: f2+e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1c26ac3a-fec5-1510-aa54-4bdeb39b0c53-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, F2, E3) (0.0s)
And the red player splits 1 piece from e3 onto d2
Accepted: e3-1-d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d161f66c-b01f-4425-e375-f0b0d312019e-D2-E3.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "1", E3, D2) (0.0s)
Then the board has red pieces matching: D12+E12k3F1
Successfully validated 6 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D12+E12k3F1") (0.0s)
]]></output>
                </test-case>
                <test-suite type="ParameterizedMethod" id="0-1044" name="NoneOfTheseAreValidBlockLocations" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" testcasecount="14" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.006087" total="14" passed="14" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="28">
                  <properties>
                    <property name="Description" value="None of These Are Valid Block Locations" />
                  </properties>
                  <test-case id="0-1030" name="NoneOfTheseAreValidBlockLocations(&quot;d1&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;d1&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="516426963" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.001241" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades d1
Rejected: Bd1: Location D1 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, D1) (0.0s)
Then the action fails
Failed with: Location D1 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1031" name="NoneOfTheseAreValidBlockLocations(&quot;d2&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;d2&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1524239031" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000399" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades d2
Rejected: Bd2: Location D2 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, D2) (0.0s)
Then the action fails
Failed with: Location D2 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1032" name="NoneOfTheseAreValidBlockLocations(&quot;e1&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e1&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="569545768" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000377" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e1
Rejected: Be1: Location E1 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E1) (0.0s)
Then the action fails
Failed with: Location E1 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1033" name="NoneOfTheseAreValidBlockLocations(&quot;e2&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e2&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="11355801" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000350" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e2
Rejected: Be2: Location E2 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E2) (0.0s)
Then the action fails
Failed with: Location E2 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1034" name="NoneOfTheseAreValidBlockLocations(&quot;e3&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e3&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1883714636" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000349" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e3
Rejected: Be3: Location E3 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E3) (0.0s)
Then the action fails
Failed with: Location E3 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1035" name="NoneOfTheseAreValidBlockLocations(&quot;f1&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;f1&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1076404444" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000334" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades f1
Rejected: Bf1: Location F1 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, F1) (0.0s)
Then the action fails
Failed with: Location F1 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1036" name="NoneOfTheseAreValidBlockLocations(&quot;f2&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;f2&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="2134570152" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000329" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades f2
Rejected: Bf2: Location F2 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, F2) (0.0s)
Then the action fails
Failed with: Location F2 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1037" name="NoneOfTheseAreValidBlockLocations(&quot;d7&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;d7&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1584709713" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000321" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades d7
Rejected: Bd7: Location D7 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, D7) (0.0s)
Then the action fails
Failed with: Location D7 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1038" name="NoneOfTheseAreValidBlockLocations(&quot;d8&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;d8&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="838336218" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000327" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades d8
Rejected: Bd8: Location D8 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, D8) (0.0s)
Then the action fails
Failed with: Location D8 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1039" name="NoneOfTheseAreValidBlockLocations(&quot;e7&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e7&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1650239419" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000329" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e7
Rejected: Be7: Location E7 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E7) (0.0s)
Then the action fails
Failed with: Location E7 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1040" name="NoneOfTheseAreValidBlockLocations(&quot;e8&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e8&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1872133265" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000332" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e8
Rejected: Be8: Location E8 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E8) (0.0s)
Then the action fails
Failed with: Location E8 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1041" name="NoneOfTheseAreValidBlockLocations(&quot;e9&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;e9&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1280009029" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000340" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades e9
Rejected: Be9: Location E9 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, E9) (0.0s)
Then the action fails
Failed with: Location E9 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1042" name="NoneOfTheseAreValidBlockLocations(&quot;f7&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;f7&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="654362508" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000330" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades f7
Rejected: Bf7: Location F7 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, F7) (0.0s)
Then the action fails
Failed with: Location F7 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                  <test-case id="0-1043" name="NoneOfTheseAreValidBlockLocations(&quot;f8&quot;,null)" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.NoneOfTheseAreValidBlockLocations(&quot;f8&quot;,null)" methodname="NoneOfTheseAreValidBlockLocations" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1668270349" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.000332" asserts="2">
                    <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player blockades f8
Rejected: Bf8: Location F8 Not Empty
-> done: ActionSteps.WhenIBlockade(Red, F8) (0.0s)
Then the action fails
Failed with: Location F8 Not Empty
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                  </test-case>
                </test-suite>
                <test-case id="0-1025" name="PerformSomeMoves" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.PerformSomeMoves" methodname="PerformSomeMoves" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="78124251" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.109101" asserts="6">
                  <properties>
                    <property name="Description" value="Perform Some Moves" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at e3 to e4
Accepted: e3e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f8cfc55-c7ea-8d9f-0af6-7449cf98dba1-E3-E4.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E3, E4) (0.0s)
When the red player drops a new piece at e3
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5182a0c2-1497-e92b-e861-6a4831aba196-E3.png?raw=true)
-> done: ActionSteps.WhenIDrop(Red, E3) (0.0s)
When the blue player blockades c2
Accepted: Bc2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2cc65043-c118-a2a3-0e19-3030878b5ae2-C2.png?raw=true)
-> done: ActionSteps.WhenIBlockade(Blue, C2) (0.0s)
When the blue player merges the piece at f7 into e7
Accepted: f7+e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/17d48168-58f0-f5e3-3f4a-6659b4a25195-E7-F7.png?raw=true)
-> done: ActionSteps.WhenIMerge(Blue, F7, E7) (0.0s)
When the red player merges the piece at e4 into e3
Accepted: e4+e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8a76118e-75f3-d925-112c-e2702b25af90-E3-E4.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E4, E3) (0.0s)
When the red player splits 1 piece from e3 onto d2
Accepted: e3-1-d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/114375ac-2104-3ea4-981b-86cf2002a43c-D2-E3.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "1", E3, D2) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1026" name="PerformSomeMoves_ShortNotation" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.PerformSomeMoves_ShortNotation" methodname="PerformSomeMoves_ShortNotation" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="1825016422" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.002348" asserts="22">
                  <properties>
                    <property name="Description" value="Perform Some Moves - Short Notation" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When red does e3e4
Accepted: e3e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f8cfc55-c7ea-8d9f-0af6-7449cf98dba1-E3-E4.png?raw=true)
-> done: ActionSteps.WhenDoes(Red, "e3e4") (0.0s)
When red does @e3
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5182a0c2-1497-e92b-e861-6a4831aba196-E3.png?raw=true)
-> done: ActionSteps.WhenDoes(Red, "@e3") (0.0s)
When blue does Bc2
Accepted: Bc2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2cc65043-c118-a2a3-0e19-3030878b5ae2-C2.png?raw=true)
-> done: ActionSteps.WhenDoes(Blue, "Bc2") (0.0s)
When blue does f7+e7
Accepted: f7+e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/17d48168-58f0-f5e3-3f4a-6659b4a25195-E7-F7.png?raw=true)
-> done: ActionSteps.WhenDoes(Blue, "f7+e7") (0.0s)
When red does e4+e3
Accepted: e4+e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8a76118e-75f3-d925-112c-e2702b25af90-E3-E4.png?raw=true)
-> done: ActionSteps.WhenDoes(Red, "e4+e3") (0.0s)
When red does e3-1-d2
Accepted: e3-1-d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/114375ac-2104-3ea4-981b-86cf2002a43c-D2-E3.png?raw=true)
-> done: ActionSteps.WhenDoes(Red, "e3-1-d2") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1027" name="PerformSomeMoves_TableNotation" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.PerformSomeMoves_TableNotation" methodname="PerformSomeMoves_TableNotation" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="11129089" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:35Z" duration="0.838803" asserts="141">
                  <properties>
                    <property name="Description" value="Perform Some Moves - Table Notation" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the following moves are performed:
  --- table step argument ---
  | RedAction1 | RedAction2 | BlueAction1 | BlueAction2 |
  | f1+f2      | f2-1-g2    | e8+e9       | Bi3         |
  | e3+d2      | Bb5        | f7+f8       | f8f7        |
  | d2c1       | e1f1       | Ba2         | f7-1-g7     |
  | e2e3       | d1e1       | Bf8         | f7g6        |
  | Bg1        | Bb1        | Bd4         | d7+e7       |
  | f1+e1      | f2e2       | @d7         | d7+d8       |
  | @f2        | f2+e2      | @d7         | @e8         |
  | @f2        | e3+f2      | e8+d7       | @e8         |
  | @d1        | @e3        | @f7         | f7+e8       |
  | @f1        | @d2        | @f7         | Bd6         |
Accepted: f1+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/67fdf138-8f61-5da7-ab35-12795493aee5-F1-F2.png?raw=true)
Accepted: f2-1-g2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1af32ad9-c961-a61b-409a-933fb50fb937-F2-G2.png?raw=true)
Accepted: e8+e9
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/cb1a604d-fb41-39d8-5ac6-22f08e23ccc3-E8-E9.png?raw=true)
Accepted: Bi3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2399e1a0-8612-b381-4d2e-3a657ec52421-I3.png?raw=true)
Accepted: e3+d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a65671c2-3d77-9002-52ec-3fbcc1907851-D2-E3.png?raw=true)
Accepted: Bb5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e3834eb7-a3d0-d039-d608-cc8502f73fa5-B5.png?raw=true)
Accepted: f7+f8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/efac1306-33ec-8fd7-e323-bf19514ae0a3-F7-F8.png?raw=true)
Accepted: f8f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8ae1b03c-c460-8ba3-fcd6-73ab09a27d17-F7-F8.png?raw=true)
Accepted: d2c1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/9d73463e-9f60-12bc-51f7-edabf928c646-C1-D2.png?raw=true)
Accepted: e1f1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3796d78a-70f5-b431-b8cc-56a853cd349f-E1-F1.png?raw=true)
Accepted: Ba2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5376f783-a365-9120-1c99-221a0851529e-A2.png?raw=true)
Accepted: f7-1-g7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c494f7ff-1304-be41-0636-2e8a48e0a46e-F7-G7.png?raw=true)
Accepted: e2e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a8fc7cb1-317d-702d-3365-a72ea2d6e5ab-E2-E3.png?raw=true)
Accepted: d1e1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7cb37e96-a87f-4839-ab91-1a3c77b73f40-D1-E1.png?raw=true)
Accepted: Bf8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f55fa2fa-0b93-0964-07c3-7ed5f2f8dede-F8.png?raw=true)
Accepted: f7g6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/896594e3-7767-1914-cb7c-0b039266c4e6-F7-G6.png?raw=true)
Accepted: Bg1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0bba625a-68fb-7941-af04-112ba5a8dd1f-G1.png?raw=true)
Accepted: Bb1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/55033321-1ca3-4dbd-be86-12344d63f732-B1.png?raw=true)
Accepted: Bd4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ad88b565-b6ec-89b1-7fe2-270773e5ba06-D4.png?raw=true)
Accepted: d7+e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4aa47f8c-133e-9d2d-8d56-95559af3c5b0-D7-E7.png?raw=true)
Accepted: f1+e1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e58f02ce-7ed7-7dad-bedc-3e6a87a5fe94-E1-F1.png?raw=true)
Accepted: f2e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/59a1cf13-6e2f-4f0e-0b71-01b38971f760-E2-F2.png?raw=true)
Accepted: @d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7cb32bc7-085b-7ab2-2f1a-c8b213be89be-D7.png?raw=true)
Accepted: d7+d8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f405944e-9098-bff0-ff01-38d0b2417875-D7-D8.png?raw=true)
Accepted: @f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/6bc4a20a-5e28-5ca2-eb5f-6bb37c1c68b9-F2.png?raw=true)
Accepted: f2+e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8512d25a-4f05-7d95-dd27-5c5a8d1e8942-E2-F2.png?raw=true)
Accepted: @d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/cdb9a80d-2178-1092-0beb-2d9bd2fa7765-D7.png?raw=true)
Accepted: @e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5817ba73-10d3-c8b8-49c0-0c328ef1c67a-E8.png?raw=true)
Accepted: @f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5c6896be-106b-7f80-2e7b-1966a71c1d7f-F2.png?raw=true)
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/9d8dce61-ebc6-dc70-141e-932d94600eea-E3-F2.png?raw=true)
Accepted: e8+d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/03874236-00bb-48cc-ded9-f93b03099b24-D7-E8.png?raw=true)
Accepted: @e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5afe91be-7e72-3436-b5af-2d816ef2e37c-E8.png?raw=true)
Accepted: @d1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a32c2fe4-e203-8134-5328-8ee60647b1be-D1.png?raw=true)
Accepted: @e3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a8251063-7c7c-8969-f189-546123b79116-E3.png?raw=true)
Accepted: @f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/f13707a5-c8e7-a441-68bc-769162413562-F7.png?raw=true)
Accepted: f7+e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/aec6595d-7606-683d-d250-2dc39954c01f-E8-F7.png?raw=true)
Accepted: @f1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/44b1e696-f4ab-9d58-a883-9e01980cb4a5-F1.png?raw=true)
Accepted: @d2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/548d6064-f382-dfe5-f1e9-33c37f16839d-D2.png?raw=true)
Accepted: @f7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/26869e5d-58b6-607a-0935-a7697a8b06f1-F7.png?raw=true)
Accepted: Bd6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1fc66954-f9c4-f931-2dcc-e80f493b0699-D6.png?raw=true)
-> done: ActionSteps.WhenTheFollowingMoves(<table>) (0.8s)
]]></output>
                </test-case>
                <test-case id="0-1023" name="StartFromAnEmptyBoard" fullname="Testing.Specflow.Features.GameRules.ExamplesFeature.StartFromAnEmptyBoard" methodname="StartFromAnEmptyBoard" classname="Testing.Specflow.Features.GameRules.ExamplesFeature" runstate="Runnable" seed="2101008611" result="Passed" start-time="2020-02-07 01:48:35Z" end-time="2020-02-07 01:48:36Z" duration="0.047159" asserts="2">
                  <properties>
                    <property name="Description" value="Start From an Empty Board" />
                  </properties>
                  <output><![CDATA[Given I define board WeirdSituation1 as:
  --- table step argument ---
  | Any header here - the name doesn't matter |
  | Benediction v1: R E2 B-E8                 |
  | R:D1+2+E1k+2k+3k+F1k2G1k+2+               |
  | B:D6k+7k+8E7+8k+9k+F78k+H5+               |
  | X:B5C2D4E6F3H6I1                          |
-> done: SetupSteps.GivenIDefine("WeirdSituation1", <table>) (0.0s)
Given I have an empty E2 E8 board
Loaded empty game board with Red Home at E2 and Blue Home at E8
-> done: SetupSteps.GivenIHaveAnEmptyBoard(E2, E8) (0.0s)
And I add this red piece: E3k+
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ef230c10-9e1a-3cbf-1a42-6ef542e184ac.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "E3k+") (0.0s)
And I add these blue pieces: D45+E56k7F5++++6+b+++7+++++
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3503036d-2e06-2a04-9548-2751253e93f2.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Blue, "D45+E56k7F5++++6+...") (0.0s)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1045" name="MergeRulesFeature" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" testcasecount="14" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.180767" total="14" passed="1" failed="0" warnings="0" inconclusive="13" skipped="0" asserts="4">
                <properties>
                  <property name="Description" value="Merge Rules" />
                </properties>
                <test-case id="0-1059" name="CannotMergeAboveStackSizeFifteen" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeAboveStackSizeFifteen" methodname="CannotMergeAboveStackSizeFifteen" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1566721457" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.112723" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge Above Stack Size Fifteen" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1053" name="CannotMergeCursedAndCursed" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeCursedAndCursed" methodname="CannotMergeCursedAndCursed" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1930915994" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004633" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge Cursed and Cursed" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1057" name="CannotMergeCursedAndKing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeCursedAndKing" methodname="CannotMergeCursedAndKing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="2096190598" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.007562" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge Cursed and King" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1052" name="CannotMergeCursedAndNormal" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeCursedAndNormal" methodname="CannotMergeCursedAndNormal" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="641187908" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004565" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge Cursed and Normal" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1058" name="CannotMergeKingAndKing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.CannotMergeKingAndKing" methodname="CannotMergeKingAndKing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1982862735" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005556" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Merge King and King" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1049" name="MergeAboveSizeTwoRequiresBlessing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeAboveSizeTwoRequiresBlessing" methodname="MergeAboveSizeTwoRequiresBlessing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1114153362" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004676" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Above Size Two Requires Blessing" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1056" name="MergeBlessedAndKing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeBlessedAndKing" methodname="MergeBlessedAndKing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1686891324" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005379" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Blessed and King" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1051" name="MergeCursedAndBlessed" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeCursedAndBlessed" methodname="MergeCursedAndBlessed" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="2010642964" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.006693" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Cursed and Blessed" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1046" name="MergeHappyPath" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeHappyPath" methodname="MergeHappyPath" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="350906742" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.001050" asserts="4">
                  <properties>
                    <property name="Description" value="Merge Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player merges the piece at e3 into f2
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2bb95324-1990-6880-7344-3f8bc6e10ece-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E3, F2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1047" name="MergeMaximum" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeMaximum" methodname="MergeMaximum" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1499714779" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004444" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Maximum" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1050" name="MergeNormalAndBlessed" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeNormalAndBlessed" methodname="MergeNormalAndBlessed" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="1253358238" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005288" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Normal and Blessed" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1054" name="MergeNormalAndKing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeNormalAndKing" methodname="MergeNormalAndKing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="535977641" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004695" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Normal and King" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1055" name="MergeNormalAndKingAboveStackSizeTwoRequiresBlessing" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeNormalAndKingAboveStackSizeTwoRequiresBlessing" methodname="MergeNormalAndKingAboveStackSizeTwoRequiresBlessing" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="600646687" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005608" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Normal and King Above Stack Size Two Requires Blessing" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1048" name="MergeNormalAndNormal" fullname="Testing.Specflow.Features.GameRules.MergeRulesFeature.MergeNormalAndNormal" methodname="MergeNormalAndNormal" classname="Testing.Specflow.Features.GameRules.MergeRulesFeature" runstate="Runnable" seed="706247165" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.007212" asserts="0">
                  <properties>
                    <property name="Description" value="Merge Normal and Normal" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1060" name="MovementRulesFeature" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" testcasecount="9" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.137069" total="9" passed="9" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="55">
                <properties>
                  <property name="Description" value="Movement Rules" />
                </properties>
                <test-case id="0-1063" name="BlueCannotMoveThroughBlueWall" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.BlueCannotMoveThroughBlueWall" methodname="BlueCannotMoveThroughBlueWall" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="203315090" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.002215" asserts="16">
                  <properties>
                    <property name="Description" value="Blue Cannot Move Through Blue Wall" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the blue player moves the piece at e9 to e1
Rejected: e9e1: Your Move, Red
-> done: ActionSteps.WhenIMove(Blue, E9, E1) (0.0s)
Then the action fails
Failed with: Your Move, Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the blue player moves the piece at e9 to e5
Rejected: e9e5: Your Move, Red
-> done: ActionSteps.WhenIMove(Blue, E9, E5) (0.0s)
Then the action fails
Failed with: Your Move, Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the blue player moves the piece at e9 to a5
Rejected: e9a5: Your Move, Red
-> done: ActionSteps.WhenIMove(Blue, E9, A5) (0.0s)
Then the action fails
Failed with: Your Move, Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the blue player moves the piece at f8 to f1
Rejected: f8f1: Your Move, Red
-> done: ActionSteps.WhenIMove(Blue, F8, F1) (0.0s)
Then the action fails
Failed with: Your Move, Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the blue player moves the piece at f8 to a4
Rejected: f8a4: Your Move, Red
-> done: ActionSteps.WhenIMove(Blue, F8, A4) (0.0s)
Then the action fails
Failed with: Your Move, Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the blue player moves the piece at d8 to d1
Rejected: d8d1: Your Move, Red
-> done: ActionSteps.WhenIMove(Blue, D8, D1) (0.0s)
Then the action fails
Failed with: Your Move, Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the blue player moves the piece at d8 to i4
Rejected: d8i4: Your Move, Red
-> done: ActionSteps.WhenIMove(Blue, D8, I4) (0.0s)
Then the action fails
Failed with: Your Move, Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1065" name="CanCaptureEnemyPiece" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CanCaptureEnemyPiece" methodname="CanCaptureEnemyPiece" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="2127069941" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.041979" asserts="4">
                  <properties>
                    <property name="Description" value="Can Capture Enemy Piece" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F24+            |
  | B:D5+7E78k9F78            |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d41338c3-5a07-b52e-0a73-bb854689c0ad.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at f4 two points to the northwest
Accepted: f4d5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a69f1f14-8420-ea37-1fe2-7e08c1a51399-D5-F4.png?raw=true)
-> done: ActionSteps.WhenIMovePointsDirection(Red, F4, "two", "northwest") (0.0s)
Then there should be a red two-stack on d5
-> done: ValidationSteps.ThenThereShouldBe(Red, "two", D5) (0.0s)
And there should not be any blue pieces on d5
-> done: ValidationSteps.ThenThereShouldNotBeAny(Blue, D5) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1066" name="CannotCaptureOwnPiece" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CannotCaptureOwnPiece" methodname="CannotCaptureOwnPiece" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="375849037" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.001093" asserts="2">
                  <properties>
                    <property name="Description" value="Cannot Capture Own Piece" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F24+            |
  | B:D5+7E78k9F78            |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d41338c3-5a07-b52e-0a73-bb854689c0ad.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at f4 two points to the south
Rejected: f4f2: Destination F2 Is Your Own Piece and Cannot Be Moved Onto By Red
-> done: ActionSteps.WhenIMovePointsDirection(Red, F4, "two", "south") (0.0s)
Then the action fails
Failed with: Destination F2 Is Your Own Piece and Cannot Be Moved Onto By Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1064" name="CannotDepartEdgeOfBoard" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CannotDepartEdgeOfBoard" methodname="CannotDepartEdgeOfBoard" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="1215418192" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.019924" asserts="2">
                  <properties>
                    <property name="Description" value="Cannot Depart Edge Of Board" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3H2+             |
  | B:B5+E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8fbbd754-a763-04be-d790-14795642a78a.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at h2 two points to the northeast
Unable to reach point 2 northeast from I2 (starting from H2)
-> done: ActionSteps.WhenIMovePointsDirection(Red, H2, "two", "northeast") (0.0s)
Then the action fails
Failed with: Unable to reach point 2 northeast from I2 (starting from H2)
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1067" name="CannotMoveOntoBlock" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CannotMoveOntoBlock" methodname="CannotMoveOntoBlock" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="1665196024" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.020944" asserts="4">
                  <properties>
                    <property name="Description" value="Cannot Move Onto Block" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F24+            |
  | B:D5+7E78k9F78            |
  | X:E5G3                    |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b1dbf9f7-46b7-4600-43f7-89f3ead81c5e.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at f4 to e5
Rejected: f4e5: Destination E5 Contains a Block, Which Cannot Be Moved Onto
-> done: ActionSteps.WhenIMove(Red, F4, E5) (0.0s)
Then the action fails
Failed with: Destination E5 Contains a Block, Which Cannot Be Moved Onto
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the blue player moves the piece at d5 to e5
Rejected: d5e5: Your Move, Red
-> done: ActionSteps.WhenIMove(Blue, D5, E5) (0.0s)
Then the action fails
Failed with: Your Move, Red
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1068" name="CannotMoveOverBlock" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.CannotMoveOverBlock" methodname="CannotMoveOverBlock" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="986857584" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.001330" asserts="2">
                  <properties>
                    <property name="Description" value="Cannot Move Over Block" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F24+            |
  | B:D5+7E78k9F78            |
  | X:E5G3                    |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b1dbf9f7-46b7-4600-43f7-89f3ead81c5e.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at f4 two points to the northwest
Rejected: f4d5: Stack Size 2 Piece At F4 Cannot Reach D5 (but can reach: )
-> done: ActionSteps.WhenIMovePointsDirection(Red, F4, "two", "northwest") (0.0s)
Then the action fails
Failed with: Stack Size 2 Piece At F4 Cannot Reach D5 (but can reach: )
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1069" name="MoveThroughWallIsAssumedIfPossible" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.MoveThroughWallIsAssumedIfPossible" methodname="MoveThroughWallIsAssumedIfPossible" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="716763186" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.046301" asserts="3">
                  <properties>
                    <property name="Description" value="Move Through Wall Is Assumed If Possible" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B=E8 |
  | R:D12E12k3H4+++           |
  | B:B3+++D8E8k9F78          |
  | X:E5F6G3                  |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/ede23154-af5e-5f21-ec9e-aef50f0f5630.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves the piece at b3 to b5
Accepted: b3b5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3fa2bef3-17eb-7fcb-dbc5-a4646e5ff6ef-B3-B5.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, B3, B5) (0.0s)
Then there should be a blue four-stack with a blessing on b5
-> done: ValidationSteps.ThenThereShouldBeBlessed(Blue, "four", B5) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1062" name="RedCannotMoveThroughRedWall" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.RedCannotMoveThroughRedWall" methodname="RedCannotMoveThroughRedWall" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="1209884161" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.001695" asserts="16">
                  <properties>
                    <property name="Description" value="Red Cannot Move Through Red Wall" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player moves the piece at e1 to e9
Rejected: e1e9: Stack Size 1 Piece At E1 Cannot Reach E9 (but can reach: E2)
-> done: ActionSteps.WhenIMove(Red, E1, E9) (0.0s)
Then the action fails
Failed with: Stack Size 1 Piece At E1 Cannot Reach E9 (but can reach: E2)
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the red player moves the piece at e1 to i1
Rejected: e1i1: Stack Size 1 Piece At E1 Cannot Reach I1 (but can reach: F1)
-> done: ActionSteps.WhenIMove(Red, E1, I1) (0.0s)
Then the action fails
Failed with: Stack Size 1 Piece At E1 Cannot Reach I1 (but can reach: F1)
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the red player moves the piece at e1 to a1
Rejected: e1a1: Stack Size 1 Piece At E1 Cannot Reach A1 (but can reach: D1)
-> done: ActionSteps.WhenIMove(Red, E1, A1) (0.0s)
Then the action fails
Failed with: Stack Size 1 Piece At E1 Cannot Reach A1 (but can reach: D1)
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the red player moves the piece at f1 to f8
Rejected: f1f8: Stack Size 1 Piece At F1 Cannot Reach F8 (but can reach: F2)
-> done: ActionSteps.WhenIMove(Red, F1, F8) (0.0s)
Then the action fails
Failed with: Stack Size 1 Piece At F1 Cannot Reach F8 (but can reach: F2)
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the red player moves the piece at f1 to a2
Rejected: f1a2: Stack Size 1 Piece At F1 Cannot Reach A2 (but can reach: E2)
-> done: ActionSteps.WhenIMove(Red, F1, A2) (0.0s)
Then the action fails
Failed with: Stack Size 1 Piece At F1 Cannot Reach A2 (but can reach: E2)
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the red player moves the piece at d1 to i2
Rejected: d1i2: Stack Size 1 Piece At D1 Cannot Reach I2 (but can reach: E2)
-> done: ActionSteps.WhenIMove(Red, D1, I2) (0.0s)
Then the action fails
Failed with: Stack Size 1 Piece At D1 Cannot Reach I2 (but can reach: E2)
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the red player moves the piece at d1 to d8
Rejected: d1d8: Stack Size 1 Piece At D1 Cannot Reach D8 (but can reach: D2)
-> done: ActionSteps.WhenIMove(Red, D1, D8) (0.0s)
Then the action fails
Failed with: Stack Size 1 Piece At D1 Cannot Reach D8 (but can reach: D2)
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1061" name="RepeatMovesNotAllowed" fullname="Testing.Specflow.Features.GameRules.MovementRulesFeature.RepeatMovesNotAllowed" methodname="RepeatMovesNotAllowed" classname="Testing.Specflow.Features.GameRules.MovementRulesFeature" runstate="Runnable" seed="2095681603" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.001074" asserts="6">
                  <properties>
                    <property name="Description" value="Repeat Moves Not Allowed" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player moves the piece at e3 to e4
Accepted: e3e4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/0f8cfc55-c7ea-8d9f-0af6-7449cf98dba1-E3-E4.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E3, E4) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
When the red player moves the piece at e4 to e5
Rejected: e4e5: Piece at E4 Has Already Moved This Turn
-> done: ActionSteps.WhenIMove(Red, E4, E5) (0.0s)
Then the action fails
Failed with: Piece at E4 Has Already Moved This Turn
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1070" name="SplitRulesFeature" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" testcasecount="18" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.167619" total="18" passed="3" failed="0" warnings="0" inconclusive="15" skipped="0" asserts="15">
                <properties>
                  <property name="Description" value="Split Rules" />
                </properties>
                <test-case id="0-1085" name="BlessedStackLosesBlessingUponSplit_Merge" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.BlessedStackLosesBlessingUponSplit_Merge" methodname="BlessedStackLosesBlessingUponSplit_Merge" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="481492029" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.006367" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Stack Loses Blessing Upon Split-Merge" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1087" name="CannotSplit_MergeBlessedStackOntoKingOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeBlessedStackOntoKingOverStackSizeTwo" methodname="CannotSplit_MergeBlessedStackOntoKingOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1963052849" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004702" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Blessed Stack Onto King Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1086" name="CannotSplit_MergeBlessedStackOntoRegularPieceOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeBlessedStackOntoRegularPieceOverStackSizeTwo" methodname="CannotSplit_MergeBlessedStackOntoRegularPieceOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="875535101" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005842" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Blessed Stack Onto Regular Piece Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1081" name="CannotSplit_MergeOntoCursedPiece" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeOntoCursedPiece" methodname="CannotSplit_MergeOntoCursedPiece" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="2052716521" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.007221" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Onto Cursed Piece" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1084" name="CannotSplit_MergeOntoKingOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeOntoKingOverStackSizeTwo" methodname="CannotSplit_MergeOntoKingOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="388165875" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004703" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Onto King Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1083" name="CannotSplit_MergeOntoRegularPieceOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeOntoRegularPieceOverStackSizeTwo" methodname="CannotSplit_MergeOntoRegularPieceOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="2140951741" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005497" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Onto Regular Piece Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1082" name="CannotSplit_MergeOverBlock" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.CannotSplit_MergeOverBlock" methodname="CannotSplit_MergeOverBlock" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="175534861" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004839" asserts="0">
                  <properties>
                    <property name="Description" value="Cannot Split-Merge Over Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1079" name="Split_CaptureCannotMoveOverBlock" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_CaptureCannotMoveOverBlock" methodname="Split_CaptureCannotMoveOverBlock" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="915321552" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005723" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Capture Cannot Move Over Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1072" name="Split_CaptureHappyPath" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_CaptureHappyPath" methodname="Split_CaptureHappyPath" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="953475709" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.039089" asserts="3">
                  <properties>
                    <property name="Description" value="Split-Capture Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R=E2 B E8 |
  | R:D12E12k6+F1             |
  | B:D78E78k9F5+             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/083b4731-de09-b68b-edca-be011f3f1734.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player splits 1 piece from e6 onto e7
Accepted: e6-1-e7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/aa865385-577d-aac7-3912-28c2e901c45a-E6-E7.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "1", E6, E7) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D12E12k6c7cF1
Successfully validated 7 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12k6c7cF1") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1088" name="Split_MergeBlessedStackOntoBlessedPieceOverStackSizeTwo" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MergeBlessedStackOntoBlessedPieceOverStackSizeTwo" methodname="Split_MergeBlessedStackOntoBlessedPieceOverStackSizeTwo" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="266763034" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.007398" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Merge Blessed Stack Onto Blessed Piece Over Stack Size Two" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1073" name="Split_MergeHappyPath" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MergeHappyPath" methodname="Split_MergeHappyPath" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1506993741" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.019195" asserts="6">
                  <properties>
                    <property name="Description" value="Split-Merge Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player merges the piece at e3 into f2
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2bb95324-1990-6880-7344-3f8bc6e10ece-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E3, F2) (0.0s)
And the red player splits 1 piece from f2 onto f1
Accepted: f2-1-f1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/323bfd4a-e930-dde8-3188-8ed715a90869-F1-F2.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "1", F2, F1) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D12E12kF1+2
Successfully validated 6 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12kF1+2") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1080" name="Split_MergeLeavesCorrectlySizedStacks" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MergeLeavesCorrectlySizedStacks" methodname="Split_MergeLeavesCorrectlySizedStacks" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="520935918" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004555" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Merge Leaves Correctly Sized Stacks" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1077" name="Split_MoveCannotMoveOntoBlock" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MoveCannotMoveOntoBlock" methodname="Split_MoveCannotMoveOntoBlock" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="2083622567" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005020" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Move Cannot Move Onto Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1078" name="Split_MoveCannotMoveOverBlock" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MoveCannotMoveOverBlock" methodname="Split_MoveCannotMoveOverBlock" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1230713781" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004187" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Move Cannot Move Over Block" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1076" name="Split_MoveCursesBothPieces" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MoveCursesBothPieces" methodname="Split_MoveCursesBothPieces" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1618118147" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.005204" asserts="0">
                  <properties>
                    <property name="Description" value="Split-Move Curses Both Pieces" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1071" name="Split_MoveHappyPath" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.Split_MoveHappyPath" methodname="Split_MoveHappyPath" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="948782757" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.026102" asserts="6">
                  <properties>
                    <property name="Description" value="Split-Move Happy Path" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
When the red player merges the piece at e3 into f2
Accepted: e3+f2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/2bb95324-1990-6880-7344-3f8bc6e10ece-E3-F2.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, E3, F2) (0.0s)
And the red player splits 1 piece from f2 onto f3
Accepted: f2-1-f3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3f79924d-8b43-978e-30d1-510532590828-F2-F3.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "1", F2, F3) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D12E12kF12c3c
Successfully validated 7 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D12E12kF12c3c") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1075" name="SplitDistanceCannotExceedSize" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.SplitDistanceCannotExceedSize" methodname="SplitDistanceCannotExceedSize" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="843183928" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.006934" asserts="0">
                  <properties>
                    <property name="Description" value="Split Distance Cannot Exceed Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1074" name="SplitMustRejectInvalidSizes" fullname="Testing.Specflow.Features.GameRules.SplitRulesFeature.SplitMustRejectInvalidSizes" methodname="SplitMustRejectInvalidSizes" classname="Testing.Specflow.Features.GameRules.SplitRulesFeature" runstate="Runnable" seed="1522087041" result="Inconclusive" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.004251" asserts="0">
                  <properties>
                    <property name="Description" value="Split Must Reject Invalid Sizes" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1089" name="WinLoseRulesFeature" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" testcasecount="14" result="Failed" site="Child" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:37Z" duration="0.609299" total="14" passed="10" failed="4" warnings="0" inconclusive="0" skipped="0" asserts="52">
                <properties>
                  <property name="Description" value="Win Lose Rules" />
                </properties>
                <failure>
                  <message><![CDATA[One or more child tests had errors]]></message>
                </failure>
                <test-case id="0-1093" name="BlueCapturingAnyRedKingCausesBlueWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueCapturingAnyRedKingCausesBlueWin" methodname="BlueCapturingAnyRedKingCausesBlueWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1028966066" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.041680" asserts="4">
                  <properties>
                    <property name="Description" value="Blue Capturing Any Red King Causes Blue Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B-E8 |
  | R:D123k+F3+H2+            |
  | B:B3kC3kD5+E9F78          |
  | X:B2D4F4                  |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c8116771-c3f4-75f5-bf58-7b447e3a9a69.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves the piece at c3 to d3
Accepted: c3d3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/c857e7c6-27e0-1c97-8bf0-847bbf50aaa4-C3-D3.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, C3, D3) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and blue has won
-> done: ValidationSteps.GameOver(Blue) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1095" name="BlueFormingChainWithKingCausesBlueWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueFormingChainWithKingCausesBlueWin" methodname="BlueFormingChainWithKingCausesBlueWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1036761952" result="Failed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.072789" asserts="4">
                  <properties>
                    <property name="Description" value="Blue Forming Chain With King Causes Blue Win" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected: RedWin
  But was:  Undefined
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.GameOver(ActionSide side) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 149
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WinLoseRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueFormingChainWithKingCausesBlueWin() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WinLoseRules.feature:line 80
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B=E8 |
  | R:D123k+E4c5cF5cG2c5cH2c  |
  | B:A1c2cB3k4k5C6D8+E9F8+   |
  | X:B2C7D4F246H3I4          |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/9ea9e8d6-a1d0-4495-c5dc-8d8b3c1e69d9.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player places a piece at d7
Accepted: @d7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/4b89473d-54c7-dd3c-76ea-e1abab5b3803-D7.png?raw=true)
-> done: ActionSteps.WhenIDrop(Blue, D7) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> error:   Expected: RedWin
  But was:  Undefined

]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected: RedWin
  But was:  Undefined
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.GameOver(ActionSide side) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 149
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1097" name="BlueJoiningKingToExistingChainCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueJoiningKingToExistingChainCausesRedWin" methodname="BlueJoiningKingToExistingChainCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="161333651" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.043795" asserts="4">
                  <properties>
                    <property name="Description" value="Blue Joining King To Existing Chain Causes Red Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B-E8 |
  | R:E3k+I1b2b3b+4c5c        |
  | B:A1c2c3b4b5b+D7k+        |
  | X:E46G36H4                |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8b800dd1-ec24-16ac-735a-dc4f0f7ef122.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves the piece from d7 to b5
Accepted: d7b5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/9f052b1f-04d3-0d40-227e-111baf98063b-B5-D7.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, D7, B5) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and blue has won
-> done: ValidationSteps.GameOver(Blue) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1091" name="BlueKingPassingRedWallCausesBlueWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueKingPassingRedWallCausesBlueWin" methodname="BlueKingPassingRedWallCausesBlueWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1597749703" result="Failed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.028835" asserts="2">
                  <properties>
                    <property name="Description" value="Blue King Passing Red Wall Causes Blue Win" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected: null
  But was:  "Source A2 Is Not Your Piece and Cannot Be Moved By Red"
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WinLoseRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueKingPassingRedWallCausesBlueWin() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WinLoseRules.feature:line 34
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12F2k+3+H2+            |
  | B:A2k+D5+E9F78            |
  | X:B2D4F4                  |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/99b0a999-5a88-69d0-ca81-32ab7f114b5d.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at a2 to a5
Rejected: a2a5: Source A2 Is Not Your Piece and Cannot Be Moved By Red
-> done: ActionSteps.WhenIMove(Red, A2, A5) (0.0s)
Then the action succeeds
-> error:   Expected: null
  But was:  "Source A2 Is Not Your Piece and Cannot Be Moved By Red"

And the game is over and blue has won
-> skipped because of previous errors
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected: null
  But was:  "Source A2 Is Not Your Piece and Cannot Be Moved By Red"
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1101" name="BlueMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" methodname="BlueMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1574772920" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.042969" asserts="4">
                  <properties>
                    <property name="Description" value="Blue Moving Blessed Piece Onto Blue Home Does Not Cause Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B-E8 |
  | R:E3k+G1b+2bI2b4c5c       |
  | B:A1c2c3b4bD7b+F8k+       |
  | X:A5E46G36H4              |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/63866e13-9e9f-89f1-3959-07b948680269.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves the piece from d7 to e8
Accepted: d7e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7bf6bd5d-f428-841c-1947-a2e012fba837-D7-E8.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, D7, E8) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And there should be a blue king on e8 without any blessing
-> done: ValidationSteps.ThenThereShouldBeKingNoSize(Blue, E8) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1100" name="BlueMovingBlessedPieceOntoRedHomeDoesNotCauseWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueMovingBlessedPieceOntoRedHomeDoesNotCauseWin" methodname="BlueMovingBlessedPieceOntoRedHomeDoesNotCauseWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1198065386" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.042537" asserts="4">
                  <properties>
                    <property name="Description" value="Blue Moving Blessed Piece Onto Red Home Does Not Cause Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B-E8 |
  | R:F2b7b+G2k+H3bI4c5c      |
  | B:A2c3bB3c5+D2b+F8k+      |
  | X:A5E46G36H4              |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/fa13918f-6e08-68ff-ab7d-e8544d4dc0ca.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves a piece from d2 to e2
Accepted: d2e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e7419f86-d8d0-9b4c-4756-bcf6e9caf0b8-D2-E2.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, D2, E2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And there should be a blue king on e2 without any blessing
-> done: ValidationSteps.ThenThereShouldBeKingNoSize(Blue, E2) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1103" name="BlueWithNoLegalMovesCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueWithNoLegalMovesCausesRedWin" methodname="BlueWithNoLegalMovesCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1221274770" result="Failed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.041658" asserts="3">
                  <properties>
                    <property name="Description" value="Blue With No Legal Moves Causes Red Win" />
                  </properties>
                  <failure>
                    <message><![CDATA[  The game is still in progress: BlueAction2
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.GameOver(ActionSide side) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 144
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WinLoseRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WinLoseRulesFeature.BlueWithNoLegalMovesCausesRedWin() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WinLoseRules.feature:line 170
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B-E8 |
  | R:D7cE12k78k9cF17c        |
  | B:B3k                     |
  | X:A135C16D358F358G16H2I35 |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/1e6f0f06-4f4e-8fcd-3feb-04836898d9b3.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves the piece from b3 to a2
Accepted: b3a2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/14af0df5-348a-eedd-cdd8-d95de0bd5910-A2-B3.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, B3, A2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> error:   The game is still in progress: BlueAction2
  Expected: True
  But was:  False

]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  The game is still in progress: BlueAction2
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.GameOver(ActionSide side) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 144
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1092" name="RedCapturingAnyBlueKingCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedCapturingAnyBlueKingCausesRedWin" methodname="RedCapturingAnyBlueKingCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="398169722" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.039018" asserts="4">
                  <properties>
                    <property name="Description" value="Red Capturing Any Blue King Causes Red Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R=E2 B E8 |
  | R:D123k+F3+H2+            |
  | B:B3kC3kD5+E9F78          |
  | X:B2D4F4                  |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a3d29f2e-1f9d-678c-d278-479789a56236.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at d3 to c3
Accepted: d3c3
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/7cceb3bc-c012-5ee3-7a48-50554e7bd721-C3-D3.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, D3, C3) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> done: ValidationSteps.GameOver(Red) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1094" name="RedFormingChainWithKingCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedFormingChainWithKingCausesRedWin" methodname="RedFormingChainWithKingCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="79760966" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.041825" asserts="4">
                  <properties>
                    <property name="Description" value="Red Forming Chain With King Causes Red Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R=E2 B E8 |
  | R:D123k+E4c5cF5cG5cH5+    |
  | B:B3k4k5+D78+E79F8+       |
  | X:B2C7D4F46               |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/54f2d19a-b7dc-8c06-51c9-e1918c2d789c.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player splits one piece from h5 to h6
Accepted: h5-1-h6
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/8611f675-5182-7a08-6cc5-4f60d5c62737-H5-H6.png?raw=true)
-> done: ActionSteps.WhenISplit(Red, "one", H5, H6) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> done: ValidationSteps.GameOver(Red) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1096" name="RedJoiningKingToExistingChainCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedJoiningKingToExistingChainCausesRedWin" methodname="RedJoiningKingToExistingChainCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1107568591" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.040268" asserts="4">
                  <properties>
                    <property name="Description" value="Red Joining King To Existing Chain Causes Red Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:F2k+I1b2b3b+4c5c        |
  | B:A1c2c4+5+E8k            |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/73e536a4-58dd-be12-6ab9-ca9fb255fb87.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece from f2 to h2
Accepted: f2h2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/80141706-a9fb-fd24-fb90-aa7eadd053eb-F2-H2.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, F2, H2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> done: ValidationSteps.GameOver(Red) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1090" name="RedKingPassingBlueWallCausesRedWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedKingPassingBlueWallCausesRedWin" methodname="RedKingPassingBlueWallCausesRedWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1277664522" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:36Z" duration="0.036553" asserts="4">
                  <properties>
                    <property name="Description" value="Red King Passing Blue Wall Causes Red Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board:
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12I5k          |
  | B:D78E78k9F78             |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a35f5ddf-3147-68bb-07d0-8fb31d7ae121.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at i5 to a1
Accepted: i5a1
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/3f0ceff8-f87b-9005-4ecc-6c276fc8a8e7-A1-I5.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, I5, A1) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> done: ValidationSteps.GameOver(Red) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1099" name="RedMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" methodname="RedMovingBlessedPieceOntoBlueHomeDoesNotCauseWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="117478615" result="Passed" start-time="2020-02-07 01:48:36Z" end-time="2020-02-07 01:48:37Z" duration="0.053551" asserts="4">
                  <properties>
                    <property name="Description" value="Red Moving Blessed Piece Onto Blue Home Does Not Cause Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R=E2 B E8 |
  | R:F2b7b+G2k+H3bI4c5c      |
  | B:A2c3bB3c5+D2b+F8k+      |
  | X:A5E46G36H4              |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a01356fd-0b57-499b-9115-447d239b9b15.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves a piece from f7 to e8
Accepted: f7e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e6478b17-3315-3364-6aaf-d80f484017ee-E8-F7.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, F7, E8) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And there should be a red king on e8 without any blessing
-> done: ValidationSteps.ThenThereShouldBeKingNoSize(Red, E8) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1098" name="RedMovingBlessedPieceOntoRedHomeDoesNotCauseWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedMovingBlessedPieceOntoRedHomeDoesNotCauseWin" methodname="RedMovingBlessedPieceOntoRedHomeDoesNotCauseWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="1599381997" result="Passed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.040673" asserts="4">
                  <properties>
                    <property name="Description" value="Red Moving Blessed Piece Onto Red Home Does Not Cause Win" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:C2b+D123E13F12k         |
  | B:C5+D7E7+8kF8+           |
  | X:B6D6F5H3                |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/92ef29dd-3c2d-f1ce-9784-f077e3e82580.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece from c2 to e2
Accepted: c2e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d2f23334-f79a-90b6-fd73-b2fc54a644cf-C2-E2.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, C2, E2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And there should be a two-stack king on e2 without any blessing
-> done: ValidationSteps.ThenThereShouldBeKingNoColor("two", E2) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1102" name="RedWithNoLegalMovesCausesBlueWin" fullname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedWithNoLegalMovesCausesBlueWin" methodname="RedWithNoLegalMovesCausesBlueWin" classname="Testing.Specflow.Features.GameRules.WinLoseRulesFeature" runstate="Runnable" seed="841100335" result="Failed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.042334" asserts="3">
                  <properties>
                    <property name="Description" value="Red With No Legal Moves Causes Blue Win" />
                  </properties>
                  <failure>
                    <message><![CDATA[  The game is still in progress: RedAction2
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.GameOver(ActionSide side) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 144
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WinLoseRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WinLoseRulesFeature.RedWithNoLegalMovesCausesBlueWin() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WinLoseRules.feature:line 158
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:A1k                     |
  | B:D2+E1k2k3c8k9F2c7       |
  | X:B246D168E4F18G35H16I24  |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/46ba263a-50e8-1cad-30a6-9d5e65d65db0.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece from a1 to a2
Accepted: a1a2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/5193fbda-49ff-acc8-c0f4-5d97799e1b93-A1-A2.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, A1, A2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and blue has won
-> error:   The game is still in progress: RedAction2
  Expected: True
  But was:  False

]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  The game is still in progress: RedAction2
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.GameOver(ActionSide side) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 144
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
              </test-suite>
              <test-suite type="TestFixture" id="0-1104" name="WrapAroundRulesFeature" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" testcasecount="19" result="Failed" site="Child" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.300716" total="19" passed="4" failed="5" warnings="0" inconclusive="10" skipped="0" asserts="35">
                <properties>
                  <property name="Description" value="Wrap Around Rules" />
                </properties>
                <failure>
                  <message><![CDATA[One or more child tests had errors]]></message>
                </failure>
                <test-case id="0-1115" name="BlessedPieceWrappingAroundAndMergingCanFormAnyStackSize" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundAndMergingCanFormAnyStackSize" methodname="BlessedPieceWrappingAroundAndMergingCanFormAnyStackSize" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1445889367" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.007097" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around and Merging Can Form Any Stack Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1121" name="BlessedPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" methodname="BlessedPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="2120959867" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.004162" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around and Split Merging Can Form Any Stack Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1118" name="BlessedPieceWrappingAroundAndSplittingLeavesBless_CursePair" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundAndSplittingLeavesBless_CursePair" methodname="BlessedPieceWrappingAroundAndSplittingLeavesBless_CursePair" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1861616990" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.004758" asserts="0">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around and Splitting Leaves Bless-Curse Pair" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1110" name="BlessedPieceWrappingAroundOntoHomeBecomesKing" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundOntoHomeBecomesKing" methodname="BlessedPieceWrappingAroundOntoHomeBecomesKing" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1557963252" result="Failed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.022073" asserts="2">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around Onto Home Becomes King" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected: null
  But was:  "Destination E2 Is Your Own Piece and Cannot Be Moved Onto By Red"
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundOntoHomeBecomesKing() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WrapAroundRules.feature:line 72
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:C1+E2k5+9b+             |
  | B:B6+C3+4k+               |
  | X:A35B2D4                 |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/52f1d9c2-59cc-8f43-5f64-989b684fd5f3.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at e9 to e2
Rejected: e9e2: Destination E2 Is Your Own Piece and Cannot Be Moved Onto By Red
-> done: ActionSteps.WhenIMove(Red, E9, E2) (0.0s)
Then the action succeeds
-> error:   Expected: null
  But was:  "Destination E2 Is Your Own Piece and Cannot Be Moved Onto By Red"

And the board has red pieces matching C1+E2k++5+
-> skipped because of previous errors
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected: null
  But was:  "Destination E2 Is Your Own Piece and Cannot Be Moved Onto By Red"
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1107" name="BlessedPieceWrappingAroundRemainsBlessed" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundRemainsBlessed" methodname="BlessedPieceWrappingAroundRemainsBlessed" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="228846095" result="Failed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.001951" asserts="5">
                  <properties>
                    <property name="Description" value="Blessed Piece Wrapping Around Remains Blessed" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.BlessedPieceWrappingAroundRemainsBlessed() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WrapAroundRules.feature:line 38
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
And I add this red piece: i5b
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "i5b") (0.0s)
When the red player moves the piece at i5 to a1
Rejected: i5a1: Source I5 is Empty and Cannot Be Moved
-> done: ActionSteps.WhenIMove(Red, I5, A1) (0.0s)
Then the action succeeds
-> error:   Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"

And the board has red pieces matching: A1bD12E12k3F12
-> skipped because of previous errors
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1113" name="CursedPieceWrappingAroundAndMergingRequiresBlessedTarget" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundAndMergingRequiresBlessedTarget" methodname="CursedPieceWrappingAroundAndMergingRequiresBlessedTarget" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="64583592" result="Passed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.051856" asserts="5">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around and Merging Requires Blessed Target" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R=E2 B E8 |
  | R:A4b+D128k++E137cF128c   |
  | B:A1k2cB1k3cC2c3cD7F7     |
  | X:A35B2D46F4H246          |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/baa7ac0a-3f11-78ac-f80a-a2dd502e2eb4.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player merges the piece on f8 to f1
Rejected: f8+f1: Cursed Pieces Can Only Merge With Blessed Pieces
-> done: ActionSteps.WhenIMerge(Red, F8, F1) (0.0s)
Then the action fails
Failed with: Cursed Pieces Can Only Merge With Blessed Pieces
-> done: ValidationSteps.ThenTheActionFails() (0.0s)
When the red player merges the piece on f8 to a4
Accepted: f8+a4
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/cfa8950f-bc17-b380-9f60-3046a5c0b96c-A4-F8.png?raw=true)
-> done: ActionSteps.WhenIMerge(Red, F8, A4) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching A4++D128k++E137cF12
Successfully validated 9 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "A4++D128k++E137cF12") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1119" name="CursedPieceWrappingAroundAndSplitMergingRequiresBlessedTarget" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundAndSplitMergingRequiresBlessedTarget" methodname="CursedPieceWrappingAroundAndSplitMergingRequiresBlessedTarget" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="469825247" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.006218" asserts="0">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around and Split Merging Requires Blessed Target" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1116" name="CursedPieceWrappingAroundAndSplittingRemainsCursed" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundAndSplittingRemainsCursed" methodname="CursedPieceWrappingAroundAndSplittingRemainsCursed" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="789663761" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.007587" asserts="0">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around and Splitting Remains Cursed" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1108" name="CursedPieceWrappingAroundOntoHomeBecomesKing" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundOntoHomeBecomesKing" methodname="CursedPieceWrappingAroundOntoHomeBecomesKing" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="778702328" result="Passed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.038481" asserts="3">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around Onto Home Becomes King" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R-E2 B E8 |
  | R:D1+3E3k+7c9c+           |
  | B:B4C3+6c7cD68G5k         |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/d973474a-a16c-9a07-4e99-2bb1e850a26d.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece at e9 to e2
Accepted: e9e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/01c54c74-b47e-8f9d-84bb-9033286b3bc3-E2-E9.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E9, E2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has red pieces matching: D1+3E2k+3k+7c
Successfully validated 5 Red pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Red, "D1+3E2k+3k+7c") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1105" name="CursedPieceWrappingAroundRemainsCursed" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundRemainsCursed" methodname="CursedPieceWrappingAroundRemainsCursed" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1952051422" result="Failed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.002408" asserts="5">
                  <properties>
                    <property name="Description" value="Cursed Piece Wrapping Around Remains Cursed" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.CursedPieceWrappingAroundRemainsCursed() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WrapAroundRules.feature:line 22
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
And I add this red piece: i5c
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "i5c") (0.0s)
When the red player moves the piece at i5 to a1
Rejected: i5a1: Source I5 is Empty and Cannot Be Moved
-> done: ActionSteps.WhenIMove(Red, I5, A1) (0.0s)
Then the action succeeds
-> error:   Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"

And the board has red pieces matching: A1cD12E12k3F12
-> skipped because of previous errors
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1123" name="KingStackWrappingAroundAndSplitMergingOntoPieceRemainsBlessedAndWinsGame" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingStackWrappingAroundAndSplitMergingOntoPieceRemainsBlessedAndWinsGame" methodname="KingStackWrappingAroundAndSplitMergingOntoPieceRemainsBlessedAndWinsGame" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1099527278" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.006270" asserts="0">
                  <properties>
                    <property name="Description" value="King Stack Wrapping Around and Split Merging Onto Piece Remains Blessed and Wins Game" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1122" name="KingWrappingAroundAndMergingOntoPieceRemainsBlessedAndWinsGame" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingWrappingAroundAndMergingOntoPieceRemainsBlessedAndWinsGame" methodname="KingWrappingAroundAndMergingOntoPieceRemainsBlessedAndWinsGame" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1830177186" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.004801" asserts="0">
                  <properties>
                    <property name="Description" value="King Wrapping Around And Merging Onto Piece Remains Blessed and Wins Game" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1112" name="KingWrappingAroundOntoHomeWinsGame" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingWrappingAroundOntoHomeWinsGame" methodname="KingWrappingAroundOntoHomeWinsGame" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1390496226" result="Failed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.038830" asserts="3">
                  <properties>
                    <property name="Description" value="King Wrapping Around Onto Home Wins Game" />
                  </properties>
                  <failure>
                    <message><![CDATA[  The game is still in progress: BlueAction1
  Expected: True
  But was:  False
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.GameOver(ActionSide side) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 144
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingWrappingAroundOntoHomeWinsGame() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WrapAroundRules.feature:line 96
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R=E2 B E8 |
  | R:E7+8k++                 |
  | B:B3+6+C1k2k              |
  | X:A35B2D46                |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/539e5cea-5e4f-6fae-2925-ff3447268740.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the red player moves the piece on e8 to e2
Accepted: e8e2
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/26b6b14e-222e-a269-91da-b8876229aecc-E2-E8.png?raw=true)
-> done: ActionSteps.WhenIMove(Red, E8, E2) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and red has won
-> error:   The game is still in progress: BlueAction1
  Expected: True
  But was:  False

]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  The game is still in progress: BlueAction1
  Expected: True
  But was:  False
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.GameOver(ActionSide side) in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 144
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1111" name="KingWrappingAroundOntoRegularSpaceWinsGame" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.KingWrappingAroundOntoRegularSpaceWinsGame" methodname="KingWrappingAroundOntoRegularSpaceWinsGame" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1840286653" result="Passed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.041866" asserts="4">
                  <properties>
                    <property name="Description" value="King Wrapping Around Onto Regular Space Wins Game" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B-E8 |
  | R:E7+H5k++                |
  | B:B6+C1k2k3+              |
  | X:A35B2D4                 |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/29ed879d-c90c-0446-8e3a-c0dc90933b77.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves the piece on c1 to c7
Accepted: c1c7
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/e42ce21a-32f1-fbe2-42fd-1c5320c63d6a-C1-C7.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, C1, C7) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the game is over and blue has won
-> done: ValidationSteps.GameOver(Blue) (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1106" name="NormalPieceWrappingAroundBecomesBlessed" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.NormalPieceWrappingAroundBecomesBlessed" methodname="NormalPieceWrappingAroundBecomesBlessed" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="874383802" result="Failed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.002152" asserts="5">
                  <properties>
                    <property name="Description" value="Normal Piece Wrapping Around Becomes Blessed" />
                  </properties>
                  <failure>
                    <message><![CDATA[  Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"
]]></message>
                    <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
   at TechTalk.SpecFlow.Bindings.BindingInvoker.InvokeBinding(IBinding binding, IContextManager contextManager, Object[] arguments, ITestTracer testTracer, TimeSpan& duration) in D:\a\1\s\TechTalk.SpecFlow\Bindings\BindingInvoker.cs:line 69
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStepMatch(BindingMatch match, Object[] arguments) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 517
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.ExecuteStep(IContextManager contextManager, StepInstance stepInstance) in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 422
   at TechTalk.SpecFlow.Infrastructure.TestExecutionEngine.OnAfterLastStep() in D:\a\1\s\TechTalk.SpecFlow\Infrastructure\TestExecutionEngine.cs:line 256
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.ScenarioCleanup()
   at Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.NormalPieceWrappingAroundBecomesBlessed() in F:\src\BenedictionGame\src\Testing\SpecFlow\Features\GameRules\WrapAroundRules.feature:line 30
]]></stack-trace>
                  </failure>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I have board NewGame
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
Loaded board NewGame.
-> done: SetupSteps.GivenIHaveNamedBoard("NewGame") (0.0s)
And I add this red piece: i5
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/b50cb248-3720-e98d-f5a2-c04c3545857a.png?raw=true)
-> done: SetupSteps.GivenIAddPieces(Red, "i5") (0.0s)
When the red player moves the piece at i5 to a1
Rejected: i5a1: Source I5 is Empty and Cannot Be Moved
-> done: ActionSteps.WhenIMove(Red, I5, A1) (0.0s)
Then the action succeeds
-> error:   Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"

And the board has red pieces matching: A1bD12E12k3F12
-> skipped because of previous errors
]]></output>
                  <assertions>
                    <assertion result="Failed">
                      <message><![CDATA[  Expected: null
  But was:  "Source I5 is Empty and Cannot Be Moved"
]]></message>
                      <stack-trace><![CDATA[   at Testing.SpecFlow.Common.ValidationSteps.ThenTheActionSucceeds() in F:\src\BenedictionGame\src\Testing\SpecFlow\Common\ValidationSteps.cs:line 46
]]></stack-trace>
                    </assertion>
                  </assertions>
                </test-case>
                <test-case id="0-1109" name="NormalPieceWrappingAroundOntoHomeBecomesKing" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.NormalPieceWrappingAroundOntoHomeBecomesKing" methodname="NormalPieceWrappingAroundOntoHomeBecomesKing" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="528442770" result="Passed" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.041522" asserts="3">
                  <properties>
                    <property name="Description" value="Normal Piece Wrapping Around Onto Home Becomes King" />
                  </properties>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given I load this board
  --- table step argument ---
  | Board                     |
  | Benediction v1: R E2 B-E8 |
  | R:E2k+3k+47cG4+           |
  | B:B4C6c7cD678E1+H4k       |
  | X:G3                      |
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/a1f2b0ad-7167-6a41-119f-db58b3102384.png?raw=true)
-> done: SetupSteps.GivenILoad(<table>) (0.0s)
When the blue player moves the piece at e1 to e8
Accepted: e1e8
![Board Snapshot](https://raw.githubusercontent.com/MichaelSpencerJr/BenedictionGame/master/testruns/images/462d04e2-ee9a-8d8f-d6b5-802372662ca2-E1-E8.png?raw=true)
-> done: ActionSteps.WhenIMove(Blue, E1, E8) (0.0s)
Then the action succeeds
-> done: ValidationSteps.ThenTheActionSucceeds() (0.0s)
And the board has blue pieces matching B4C6c7cD678E8k+H4k
Successfully validated 8 Blue pieces.
-> done: ValidationSteps.ThenTheBoardHasPiecesMatching(Blue, "B4C6c7cD678E8k+H4k") (0.0s)
]]></output>
                </test-case>
                <test-case id="0-1114" name="RegularPieceWrappingAroundAndMergingCanFormAnyStackSize" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.RegularPieceWrappingAroundAndMergingCanFormAnyStackSize" methodname="RegularPieceWrappingAroundAndMergingCanFormAnyStackSize" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1755257163" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.006042" asserts="0">
                  <properties>
                    <property name="Description" value="Regular Piece Wrapping Around and Merging Can Form Any Stack Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1120" name="RegularPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.RegularPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" methodname="RegularPieceWrappingAroundAndSplitMergingCanFormAnyStackSize" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="1389751117" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.007291" asserts="0">
                  <properties>
                    <property name="Description" value="Regular Piece Wrapping Around and Split Merging Can Form Any Stack Size" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
                <test-case id="0-1117" name="RegularPieceWrappingAroundAndSplittingLeavesBless_CursePair" fullname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature.RegularPieceWrappingAroundAndSplittingLeavesBless_CursePair" methodname="RegularPieceWrappingAroundAndSplittingLeavesBless_CursePair" classname="Testing.Specflow.Features.GameRules.WrapAroundRulesFeature" runstate="Runnable" seed="564572264" result="Inconclusive" start-time="2020-02-07 01:48:37Z" end-time="2020-02-07 01:48:37Z" duration="0.004484" asserts="0">
                  <properties>
                    <property name="Description" value="Regular Piece Wrapping Around and Splitting Leaves Bless-Curse Pair" />
                  </properties>
                  <reason>
                    <message><![CDATA[No matching step definition found for one or more steps.
using System;
using TechTalk.SpecFlow;

namespace MyNamespace
{
    [Binding]
    public class StepDefinitions
    {
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }
    }
}
]]></message>
                  </reason>
                  <output><![CDATA[Given I define board NewGame as:
  --- table step argument ---
  | New Game Board            |
  | Benediction v1: R-E2 B E8 |
  | R:D12E12k3F12             |
  | B:D78E78k9F78             |
-> done: SetupSteps.GivenIDefine("NewGame", <table>) (0.0s)
Given this test isn't written yet
-> No matching step definition found for the step. Use the following code to create one:
        [Given(@"this test isn't written yet")]
        public void GivenThisTestIsntWrittenYet()
        {
            ScenarioContext.Current.Pending();
        }

]]></output>
                </test-case>
              </test-suite>
            </test-suite>
          </test-suite>
        </test-suite>
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>