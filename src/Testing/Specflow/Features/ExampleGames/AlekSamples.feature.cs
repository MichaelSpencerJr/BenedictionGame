// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Testing.Specflow.Features.ExampleGames
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Alek Samples")]
    [NUnit.Framework.CategoryAttribute("scenario-image-only")]
    public partial class AlekSamplesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "scenario-image-only"};
        
#line 1 "AlekSamples.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Alek Samples", "\tIn order to confirm rules are processed correctly,\r\n\tI should be able to walk th" +
                    "rough some sample games and confirm their moves are all handled correctly.", ProgrammingLanguage.CSharp, new string[] {
                        "scenario-image-only"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "New Game Board"});
            table1.AddRow(new string[] {
                        "Benediction v1: R-E2 B E8"});
            table1.AddRow(new string[] {
                        "R:D12E12k3F12"});
            table1.AddRow(new string[] {
                        "B:D78E78k9F78"});
#line 7
 testRunner.Given("I define board NewGame as:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alek Sample Game 1")]
        public virtual void AlekSampleGame1()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alek Sample Game 1", null, ((string[])(null)));
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 15
 testRunner.Given("I have board NewGame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "RedAction1",
                            "RedAction2",
                            "BlueAction1",
                            "BlueAction2"});
                table2.AddRow(new string[] {
                            "e3e4",
                            "@e3",
                            "f8+f7",
                            "@f8"});
                table2.AddRow(new string[] {
                            "d1+d2",
                            "@d1",
                            "d7d6",
                            "@d7"});
                table2.AddRow(new string[] {
                            "f1+f2",
                            "@f1",
                            "f7f5",
                            "@f7"});
                table2.AddRow(new string[] {
                            "f2f4",
                            "f4-1-f5",
                            "d7+d6",
                            "d6b4"});
                table2.AddRow(new string[] {
                            "d2f3",
                            "@f2",
                            "b4b2",
                            "Bc2"});
                table2.AddRow(new string[] {
                            "f3h3",
                            "f1+f2",
                            "b2i5",
                            "e9+f8"});
                table2.AddRow(new string[] {
                            "h3h5",
                            "h5-1-i5",
                            "@e9",
                            "@d7"});
                table2.AddRow(new string[] {
                            "f4g4",
                            "f2f4",
                            "f8h6",
                            "h6-1-i5"});
                table2.AddRow(new string[] {
                            "e3+e4",
                            "h5i5",
                            "h6i5",
                            "@f8"});
                table2.AddRow(new string[] {
                            "f4d5",
                            "e4e5",
                            "e8+e9",
                            "Bc7"});
                table2.AddRow(new string[] {
                            "e1+e2",
                            "e2e4",
                            "f7+e7",
                            "e7e5"});
                table2.AddRow(new string[] {
                            "e4e5",
                            "d5e6",
                            "Be7",
                            "@f7"});
                table2.AddRow(new string[] {
                            "e5c5",
                            "Ba5",
                            "d8+d7",
                            "@d8"});
                table2.AddRow(new string[] {
                            "e6c6",
                            "c6-1-d7",
                            "d8d7",
                            "@d8"});
                table2.AddRow(new string[] {
                            "c5b4",
                            "c6d7",
                            "",
                            ""});
#line 16
 testRunner.When("the following moves are performed:", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Location",
                            "Contents",
                            "Size",
                            "Type"});
                table3.AddRow(new string[] {
                            "A5",
                            "Block",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "C7",
                            "Block",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "C2",
                            "Block",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "E7",
                            "Block",
                            "",
                            ""});
                table3.AddRow(new string[] {
                            "D1",
                            "Red",
                            "1",
                            "Normal"});
                table3.AddRow(new string[] {
                            "B4",
                            "Red",
                            "2",
                            "King"});
                table3.AddRow(new string[] {
                            "D7",
                            "Red",
                            "1",
                            "Cursed"});
                table3.AddRow(new string[] {
                            "F5",
                            "Red",
                            "1",
                            "Cursed"});
                table3.AddRow(new string[] {
                            "G4",
                            "Red",
                            "1",
                            "Cursed"});
                table3.AddRow(new string[] {
                            "D8",
                            "Blue",
                            "1",
                            "Normal"});
                table3.AddRow(new string[] {
                            "E9",
                            "Blue",
                            "2",
                            "King"});
                table3.AddRow(new string[] {
                            "F7",
                            "Blue",
                            "1",
                            "Normal"});
                table3.AddRow(new string[] {
                            "F8",
                            "Blue",
                            "1",
                            "Normal"});
                table3.AddRow(new string[] {
                            "I5",
                            "Blue",
                            "1",
                            "Cursed"});
#line 33
 testRunner.Then("the following locations match:", ((string)(null)), table3, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Alek Sample Game 2")]
        public virtual void AlekSampleGame2()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Alek Sample Game 2", null, ((string[])(null)));
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 51
 testRunner.Given("I have board NewGame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "RedAction1",
                            "RedAction2",
                            "BlueAction1",
                            "BlueAction2"});
                table4.AddRow(new string[] {
                            "f1+f2",
                            "@f1",
                            "f8+f7",
                            "@f8"});
                table4.AddRow(new string[] {
                            "d2+e3",
                            "@d2",
                            "d7+e7",
                            "@d7"});
                table4.AddRow(new string[] {
                            "d1+d2",
                            "@d1",
                            "d8+d7",
                            "@d8"});
                table4.AddRow(new string[] {
                            "e1+d1",
                            "@e1",
                            "e9+d8",
                            "@e9"});
                table4.AddRow(new string[] {
                            "e1+f1",
                            "@e1",
                            "f8+e9",
                            "@f8"});
                table4.AddRow(new string[] {
                            "e1+e2",
                            "@e1",
                            "f8+e8",
                            "@f8"});
                table4.AddRow(new string[] {
                            "d1d3",
                            "@d1",
                            "d7b5",
                            "@d7"});
                table4.AddRow(new string[] {
                            "f2h2",
                            "@f2",
                            "f7f5",
                            "@f7"});
                table4.AddRow(new string[] {
                            "h2f4",
                            "f4-1-f5",
                            "e7e6",
                            "e6-1-f5"});
                table4.AddRow(new string[] {
                            "Be7",
                            "f4f5",
                            "e6f5",
                            "b5d5"});
                table4.AddRow(new string[] {
                            "d3d5",
                            "d2d4",
                            "d8-1-d7",
                            "d7d5"});
                table4.AddRow(new string[] {
                            "d4d5",
                            "f1f3",
                            "f8+f7",
                            "e8f8"});
                table4.AddRow(new string[] {
                            "d5f6",
                            "f6-1-f7",
                            "f5f6",
                            "f8f7"});
                table4.AddRow(new string[] {
                            "f3f4",
                            "e3e5",
                            "f7e8",
                            "@f7"});
                table4.AddRow(new string[] {
                            "e5d5",
                            "f4f6",
                            "f7f6",
                            "e8f8"});
                table4.AddRow(new string[] {
                            "d5f6",
                            "e2e4",
                            "f8f6",
                            "Be5"});
                table4.AddRow(new string[] {
                            "e4d3",
                            "@e3",
                            "f6h4",
                            "Bh2"});
                table4.AddRow(new string[] {
                            "f2+e3",
                            "e3g3",
                            "",
                            ""});
#line 52
 testRunner.When("the following moves are performed:", ((string)(null)), table4, "When ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Location",
                            "Contents",
                            "Size",
                            "Type"});
                table5.AddRow(new string[] {
                            "E5",
                            "Block",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "E7",
                            "Block",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "H2",
                            "Block",
                            "",
                            ""});
                table5.AddRow(new string[] {
                            "D1",
                            "Red",
                            "1",
                            "Normal"});
                table5.AddRow(new string[] {
                            "D3",
                            "Red",
                            "2",
                            "King"});
                table5.AddRow(new string[] {
                            "E1",
                            "Red",
                            "1",
                            "Normal"});
                table5.AddRow(new string[] {
                            "G3",
                            "Red",
                            "2",
                            "Normal"});
                table5.AddRow(new string[] {
                            "D8",
                            "Blue",
                            "1",
                            "Normal"});
                table5.AddRow(new string[] {
                            "H4",
                            "Blue",
                            "2",
                            "King"});
#line 72
 testRunner.Then("the following locations match:", ((string)(null)), table5, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
