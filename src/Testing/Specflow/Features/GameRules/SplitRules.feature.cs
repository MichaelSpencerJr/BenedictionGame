// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Testing.Specflow.Features.GameRules
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Split Rules")]
    [NUnit.Framework.CategoryAttribute("every-change")]
    public partial class SplitRulesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "every-change"};
        
#line 1 "SplitRules.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Split Rules", @"	As a player I should see that split rules are applied correctly.  The split-away part should
	be allowed to move the same number of spaces and the size of the split-away stack.  For split-moves
	and split-captures, both split-away and left-behind parts should be cursed - unless another mechanic
	causes a blessing to be applied.  For split-merges, neither part should be cursed.", ProgrammingLanguage.CSharp, new string[] {
                        "every-change"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "New Game Board"});
            table46.AddRow(new string[] {
                        "Benediction v1: R-E2 B E8"});
            table46.AddRow(new string[] {
                        "R:D12E12k3F12"});
            table46.AddRow(new string[] {
                        "B:D78E78k9F78"});
#line 9
 testRunner.Given("I define board NewGame as:", ((string)(null)), table46, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "New Game Board"});
            table47.AddRow(new string[] {
                        "Benediction v1: R-E2 B E8"});
            table47.AddRow(new string[] {
                        "R:D1b+++++++++++++2b++++++++++++++E1+2k3b+++++++F12b+++++++"});
            table47.AddRow(new string[] {
                        "B:D78E78k9F78"});
#line 14
 testRunner.Given("I define board LargeStacks as:", ((string)(null)), table47, "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Move Happy Path")]
        public virtual void Split_MoveHappyPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Move Happy Path", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 22
 testRunner.Given("I have board NewGame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.When("the red player merges the piece at e3 into f2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 24
 testRunner.And("the red player splits 1 piece from f2 onto f3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("the board has red pieces matching: D12E12kF12c3c", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Capture Happy Path")]
        public virtual void Split_CaptureHappyPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Capture Happy Path", null, ((string[])(null)));
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table48.AddRow(new string[] {
                            "Benediction v1: R=E2 B E8"});
                table48.AddRow(new string[] {
                            "R:D12E12k6+F1"});
                table48.AddRow(new string[] {
                            "B:D78E78k9F5+"});
#line 30
 testRunner.Given("I load this board:", ((string)(null)), table48, "Given ");
#line hidden
#line 35
 testRunner.When("the red player splits 1 piece from e6 onto e7", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And("the board has red pieces matching: D12E12k6c7cF1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Merge Happy Path")]
        public virtual void Split_MergeHappyPath()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Merge Happy Path", null, ((string[])(null)));
#line 40
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 41
 testRunner.Given("I have board NewGame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 42
 testRunner.When("the red player merges the piece at e3 into f2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 43
 testRunner.And("the red player splits 1 piece from f2 onto f1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
 testRunner.And("the board has red pieces matching: D12E12kF1+2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split Must Reject Invalid Sizes")]
        public virtual void SplitMustRejectInvalidSizes()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split Must Reject Invalid Sizes", null, ((string[])(null)));
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 49
 testRunner.Given("I have board LargeStacks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.When("the red player splits 0 pieces from d2 onto d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 51
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
 testRunner.When("the red player splits 15 pieces from d2 onto d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.When("the red player splits -47 pieces from d2 onto d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.When("the red player splits 8675309 pieces from d2 onto d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.When("the red player splits 16 pieces from d2 onto d3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 59
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split Distance Cannot Exceed Size")]
        public virtual void SplitDistanceCannotExceedSize()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split Distance Cannot Exceed Size", null, ((string[])(null)));
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table49.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table49.AddRow(new string[] {
                            "R:D1b+2b+++E1+2k3b+F12b++"});
                table49.AddRow(new string[] {
                            "B:D78E78k9F78"});
#line 63
 testRunner.Given("I load this board:", ((string)(null)), table49, "Given ");
#line hidden
#line 68
 testRunner.When("the red player splits 1 piece from e3 onto e5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 69
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.When("the red player splits 2 pieces from f2 onto f5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 71
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.When("the red player splits 1 piece from d2 onto d4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.When("the red player splits 2 pieces from d2 onto d5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.When("the red player splits 3 pieces from d2 onto d6", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 77
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Move Curses Both Pieces")]
        public virtual void Split_MoveCursesBothPieces()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Move Curses Both Pieces", null, ((string[])(null)));
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 81
 testRunner.Given("I have board NewGame", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
 testRunner.When("the red player merges the piece at f1 into f2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 83
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
 testRunner.When("the red player splits 1 piece from f2 onto f3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.And("the board has red pieces matching: D12E12k3F2c3c", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Move Cannot Move Onto Block")]
        public virtual void Split_MoveCannotMoveOntoBlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Move Cannot Move Onto Block", null, ((string[])(null)));
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table50.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table50.AddRow(new string[] {
                            "R:D12E12k3F12+"});
                table50.AddRow(new string[] {
                            "B:D78E78k9F78"});
                table50.AddRow(new string[] {
                            "X:F3"});
#line 90
 testRunner.Given("I load this board:", ((string)(null)), table50, "Given ");
#line hidden
#line 96
 testRunner.When("the red player splits 1 piece from f2 onto f3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 97
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Move Cannot Move Over Block")]
        public virtual void Split_MoveCannotMoveOverBlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Move Cannot Move Over Block", null, ((string[])(null)));
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table51.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table51.AddRow(new string[] {
                            "R:D12E12k3F12+++"});
                table51.AddRow(new string[] {
                            "B:D78E78k9F78"});
                table51.AddRow(new string[] {
                            "X:F3"});
#line 101
 testRunner.Given("I load this board:", ((string)(null)), table51, "Given ");
#line hidden
#line 107
 testRunner.When("the red player splits 2 pieces from f2 onto f4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 108
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Capture Cannot Move Over Block")]
        public virtual void Split_CaptureCannotMoveOverBlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Capture Cannot Move Over Block", null, ((string[])(null)));
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table52.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table52.AddRow(new string[] {
                            "R:D12E12k3F12+++"});
                table52.AddRow(new string[] {
                            "B:D78E78k9F478"});
                table52.AddRow(new string[] {
                            "X:F3"});
#line 112
 testRunner.Given("I load this board:", ((string)(null)), table52, "Given ");
#line hidden
#line 118
 testRunner.When("the red player splits 2 pieces from f2 onto f4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 119
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Merge Leaves Correctly Sized Stacks")]
        public virtual void Split_MergeLeavesCorrectlySizedStacks()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Merge Leaves Correctly Sized Stacks", null, ((string[])(null)));
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 123
 testRunner.Given("I have board LargeStacks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 124
 testRunner.When("the red player splits 6 pieces from f2 onto e3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
 testRunner.And("there should be a red fourteen-stack on e3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
 testRunner.And("there should be a red two-stack on f2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.When("the red player splits 1 piece from d2 onto d1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 129
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.And("there should be a red fourteen-stack on d2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 131
 testRunner.And("there should be a red fifteen-stack on d1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot Split-Merge Onto Cursed Piece")]
        public virtual void CannotSplit_MergeOntoCursedPiece()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot Split-Merge Onto Cursed Piece", null, ((string[])(null)));
#line 134
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table53.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table53.AddRow(new string[] {
                            "R:D12E12k3cF12"});
                table53.AddRow(new string[] {
                            "B:D78E78k9F78"});
#line 135
 testRunner.Given("I load this board:", ((string)(null)), table53, "Given ");
#line hidden
#line 140
 testRunner.When("the red player merges the piece at f1 into f2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 141
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.When("the red player splits 1 piece from f2 onto e3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot Split-Merge Over Block")]
        public virtual void CannotSplit_MergeOverBlock()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot Split-Merge Over Block", null, ((string[])(null)));
#line 146
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table54.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table54.AddRow(new string[] {
                            "R:D12E12k3++5bF12"});
                table54.AddRow(new string[] {
                            "B:D78E78k9F78"});
                table54.AddRow(new string[] {
                            "X:E4"});
#line 147
 testRunner.Given("I load this board:", ((string)(null)), table54, "Given ");
#line hidden
#line 153
 testRunner.When("the red player splits 2 pieces from e3 onto e5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 154
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot Split-Merge Onto Regular Piece Over Stack Size Two")]
        public virtual void CannotSplit_MergeOntoRegularPieceOverStackSizeTwo()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot Split-Merge Onto Regular Piece Over Stack Size Two", null, ((string[])(null)));
#line 157
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table55.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table55.AddRow(new string[] {
                            "R:D12E12k3++5F12"});
                table55.AddRow(new string[] {
                            "B:D78E78k9F78"});
#line 158
 testRunner.Given("I load this board:", ((string)(null)), table55, "Given ");
#line hidden
#line 163
 testRunner.When("the red player splits 2 pieces from e3 onto e5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 164
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot Split-Merge Onto King Over Stack Size Two")]
        public virtual void CannotSplit_MergeOntoKingOverStackSizeTwo()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot Split-Merge Onto King Over Stack Size Two", null, ((string[])(null)));
#line 167
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table56.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table56.AddRow(new string[] {
                            "R:D12E12k3++5kF12"});
                table56.AddRow(new string[] {
                            "B:D78E78k9F78"});
#line 168
 testRunner.Given("I load this board:", ((string)(null)), table56, "Given ");
#line hidden
#line 173
 testRunner.When("the red player splits 2 pieces from e3 onto e5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 174
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Blessed Stack Loses Blessing Upon Split-Merge")]
        public virtual void BlessedStackLosesBlessingUponSplit_Merge()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Blessed Stack Loses Blessing Upon Split-Merge", null, ((string[])(null)));
#line 177
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table57.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table57.AddRow(new string[] {
                            "R:D12E12k3b+4F12"});
                table57.AddRow(new string[] {
                            "B:D78E78k9F78"});
#line 178
 testRunner.Given("I load this board:", ((string)(null)), table57, "Given ");
#line hidden
#line 183
 testRunner.When("the red player splits 1 piece from e3 onto e4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 184
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.And("there should be a red two-stack on e4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 186
 testRunner.And("there should be a red one-stack on e3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot Split-Merge Blessed Stack Onto Regular Piece Over Stack Size Two")]
        public virtual void CannotSplit_MergeBlessedStackOntoRegularPieceOverStackSizeTwo()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot Split-Merge Blessed Stack Onto Regular Piece Over Stack Size Two", null, ((string[])(null)));
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table58.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table58.AddRow(new string[] {
                            "R:D12E12k3++5F12"});
                table58.AddRow(new string[] {
                            "B:D78E78k9F78"});
#line 190
 testRunner.Given("I load this board:", ((string)(null)), table58, "Given ");
#line hidden
#line 195
 testRunner.When("the red player splits 2 pieces from e3 onto e5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 196
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot Split-Merge Blessed Stack Onto King Over Stack Size Two")]
        public virtual void CannotSplit_MergeBlessedStackOntoKingOverStackSizeTwo()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot Split-Merge Blessed Stack Onto King Over Stack Size Two", null, ((string[])(null)));
#line 199
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table59.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table59.AddRow(new string[] {
                            "R:D12E12k3++5kF12"});
                table59.AddRow(new string[] {
                            "B:D78E78k9F78"});
#line 200
 testRunner.Given("I load this board:", ((string)(null)), table59, "Given ");
#line hidden
#line 205
 testRunner.When("the red player splits 2 pieces from e3 onto e5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 206
 testRunner.Then("the action fails", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Merge Blessed Stack Onto Blessed Piece Over Stack Size Two")]
        public virtual void Split_MergeBlessedStackOntoBlessedPieceOverStackSizeTwo()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Merge Blessed Stack Onto Blessed Piece Over Stack Size Two", null, ((string[])(null)));
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table60.AddRow(new string[] {
                            "Benediction v1: R-E2 B E8"});
                table60.AddRow(new string[] {
                            "R:D12E12k3++5bF12"});
                table60.AddRow(new string[] {
                            "B:D78E78k9F78"});
#line 210
 testRunner.Given("I load this board:", ((string)(null)), table60, "Given ");
#line hidden
#line 215
 testRunner.When("the red player splits 2 pieces from e3 onto e5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 216
 testRunner.Then("the action succeeds", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.And("there should be a red three-stack on e5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
 testRunner.And("there should be a red one-stack on e3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Merge Rule Test - Over Wall")]
        [NUnit.Framework.TestCaseAttribute("+", "", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "b", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "c", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "k", "succeeds", "one-stack", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("+", "+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "b+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "c+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "k+", "succeeds", "one-stack", "three-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "b", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "c", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "k", "succeeds", "one-stack", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "b+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "c+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "k+", "succeeds", "one-stack", "three-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "", "fails", "cursed two-stack", "one-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "b", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "c", "fails", "cursed two-stack", "cursed one-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "k", "fails", "cursed two-stack", "one-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "+", "fails", "cursed two-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "b+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "c+", "fails", "cursed two-stack", "cursed two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "k+", "fails", "cursed two-stack", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "", "succeeds", "one-stack king", "two-stack king with a blessing", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "b", "succeeds", "one-stack king", "two-stack king with a blessing", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "c", "succeeds", "one-stack king", "two-stack king with a blessing", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "k", "fails", "two-stack king", "one-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "+", "succeeds", "one-stack king", "three-stack king with a blessing", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "b+", "succeeds", "one-stack king", "three-stack king with a blessing", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "c+", "succeeds", "one-stack king", "three-stack king with a blessing", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "k+", "fails", "two-stack king", "two-stack king", null)]
        public virtual void Split_MergeRuleTest_OverWall(string source, string target, string outcome, string sourceResult, string targetResult, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Merge Rule Test - Over Wall", null, exampleTags);
#line 220
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table61.AddRow(new string[] {
                            "Benediction v1: R-E2 B C6"});
                table61.AddRow(new string[] {
                            "R:A5bD8bE1c2k8cF8I5"});
                table61.AddRow(new string[] {
                            "B:C6k"});
#line 221
 testRunner.Given("I load this board:", ((string)(null)), table61, "Given ");
#line hidden
#line 226
 testRunner.And(string.Format("I add these red pieces: E9{0}A5{1}", source, target), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
 testRunner.When("the red player splits 1 piece from e9 onto a5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 228
 testRunner.Then(string.Format("the action {0}", outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 229
 testRunner.And(string.Format("there should be a red {0} on a5", targetResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 230
 testRunner.And(string.Format("there should be a red {0} on e9", sourceResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Split-Merge Rule Test - Adjacent")]
        [NUnit.Framework.TestCaseAttribute("+", "", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "b", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "c", "fails", "two-stack", "cursed one-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "k", "succeeds", "one-stack", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("+", "+", "fails", "two-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "b+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "c+", "fails", "two-stack", "cursed two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("+", "k+", "fails", "two-stack", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "b", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "c", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "k", "succeeds", "one-stack", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "b+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "c+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("b+", "k+", "succeeds", "one-stack", "three-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "", "fails", "cursed two-stack", "one-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "b", "succeeds", "one-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "c", "fails", "cursed two-stack", "cursed one-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "k", "fails", "cursed two-stack", "one-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "+", "fails", "cursed two-stack", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "b+", "succeeds", "one-stack", "three-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "c+", "fails", "cursed two-stack", "cursed two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("c+", "k+", "fails", "cursed two-stack", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "", "succeeds", "one-stack king", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "b", "succeeds", "one-stack king", "two-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "c", "fails", "two-stack king", "cursed one-stack", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "k", "fails", "two-stack king", "one-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "+", "fails", "two-stack king", "two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "b+", "succeeds", "one-stack king", "three-stack king", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "c+", "fails", "two-stack king", "cursed two-stack", null)]
        [NUnit.Framework.TestCaseAttribute("k+", "k+", "fails", "two-stack king", "two-stack king", null)]
        public virtual void Split_MergeRuleTest_Adjacent(string source, string target, string outcome, string sourceResult, string targetResult, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Split-Merge Rule Test - Adjacent", null, exampleTags);
#line 267
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                            "Board"});
                table62.AddRow(new string[] {
                            "Benediction v1: R-E2 B C6"});
                table62.AddRow(new string[] {
                            "R:A5bD8bE1c2k8cF8I5"});
                table62.AddRow(new string[] {
                            "B:C6k"});
#line 268
 testRunner.Given("I load this board:", ((string)(null)), table62, "Given ");
#line hidden
#line 273
 testRunner.And(string.Format("I add these red pieces: A1{0}A2{1}", source, target), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
 testRunner.When("the red player splits 1 piece from a1 onto a2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 275
 testRunner.Then(string.Format("the action {0}", outcome), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 276
 testRunner.And(string.Format("there should be a red {0} on a2", targetResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 277
 testRunner.And(string.Format("there should be a red {0} on a1", sourceResult), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
